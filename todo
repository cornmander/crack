
Crack ToDo File & Project Plan
==============================

Copyright 2009 Google Inc.


Roadmap
-------

for 0.1:
-   explicit base class method invocation syntax (void foo() {Super.foo();})
-   composition of constructors/destructors
-   the "oper" keyword
-   "Foo x = {1, 2}" construction syntax.
-   break & continue
-   short circuit logic operators
-   floating point types
-   Should be able to do instance construction in a statement context without 
    it being misinterpreted as a definition
-   empty statements should work: if (false) ;
-   global variables should not get cleaned up until the end of the program.
    DONE.
-   numeric negation: "int j = -i;"
-   fix numeric conversion.
-   string interpolation expressions: s := `some string $val`;
-   fix cleanups during assignment (a = b does b.bind() but not a.release())
    DONE
-   allow utf-8 chars for strings and identifiers.  DONE
-   the '`' operator DONE
-   multiple inheritence shouldn't cause bad errors (it need not work) DONE 
    (it now works).

for 1.0:
-   cleanup:
    -   combine FuncDef and OverloadDef into a base class with a virtual 
        matches() for arg list defs, or just make FuncDef a smaller thing and 
        always use OverloadDef
-   function arguments are currently SSA values, which means this won't work:
    type func(int a) { a = 100; }
-   doc-comments
-   first class functions (including overload selection: func[Type1, Type2])
-   keyword arguments
-   sequence construction 
-   type inference
-   for/in loops
-   exceptions
-   minor features
    -   warn the user when an overload hides an earlier overload (foo(String) 
        following foo(Object), for example).


