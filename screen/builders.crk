// Builder definitions for screen
// Copyright 2010-2011 Shannon Weyrick <weyrick@mozek.us>

import crack.io Writer, StringWriter, StringFormatter, FStr;
import crack.exp.dir Directory;
import crack.exp.file File, FileInfo;
import crack.exp.process Process;
import crack.cont.treemap TreeMap;
import crack.cont.array Array;
import crack.lang AssertionError, SubString;
import crack.exp.regex Regex;

import config config, T_INIT, T_CRACK, T_BINARY, T_FINISHED;
import testdata TestData;

///////////////////////////

class Result {
    bool pass;
    String expected = {}, actual = {};

    oper init(bool t): pass = t { }
    oper init(String e, String a): pass = false, expected = e, actual = a { 
        
    }
}

class BuilderTestHarness;

// one per builder that exists in crack
// specific builders are defined below BuilderTestHarness
class CrackBuilderDef {
    BuilderTestHarness newTestHarness(TestData d) {
        throw AssertionError("virtual");
    }
    bool separateBinary() { throw AssertionError("virtual"); }
    String getName() { throw AssertionError("virtual"); }
    String getNick() { throw AssertionError("virtual"); }
    String getCrackOptions(BuilderTestHarness h) { return ""; }
    String getBinaryOptions(BuilderTestHarness h) { return ""; }
}


// execute crack process for specific builder for specific test
// get output, compare results, decide pass/fail
// diff failed output
// maintain state so we don't have on crack processes
// maintain final PASS/FAIL output for this builder/test
class BuilderTestHarness {

    Result crackResult;
    Result binaryResult;

    StringWriter output = { }; // test results
    StringWriter vOutput = { }; // verbose

    int _status = T_INIT;
    CrackBuilderDef _bDef;
    TestData _data;
    Process _proc;
    String _testBinary;

    oper init(CrackBuilderDef d, TestData data) : _bDef = d,
                                                  _data = data { }


    String _colorMsg(String c, String msg) {
        sw := StringFormatter(128);
        sw `\033[$(c);1m$(msg)\033[0m`;
        return sw.createString();
    }
    void _pass() {
        output.write(_colorMsg("32", "PASS "));
    }
    void _fail() {
        output.write(_colorMsg("31", "FAIL "));
    }

    Result compareOutput(String expected, String actual) {

        // variable replacement
        // XXX using regex isn't necessary here, but String doesn't have
        // a simple replace yet
        pat := Regex('%OUTDIR%');
        if (pat.search(expected))
            expected = pat.subst(expected, config.outDir.nameWithTrailing());

        // note that we ignore trailing newspace on expected and actual
        if (expected.rtrim() == actual.rtrim()) {
            _pass();
            return Result(true);
        }
        else {
            _fail();
            return Result(expected, actual);
        }

    }

    void runBinary() {

        String args = {};

        if (_data.sections["ARGS"]) {
            args = _data.sections["ARGS"].rtrim();
        }

        output.write(_bDef.getNick());
        output.write(" Run: ");

        // native: run binary to get final results for comparison
        bfi := FileInfo(_testBinary);
        if (!bfi.exists()) {
            // shouldn't happen since we don't run binary if compile failed...
            _fail();
            vOutput.write("binary wasn't created, check compile output");
            binaryResult = Result(false);
            _status = T_FINISHED;
            return;
        }

        cmd := _testBinary + " " + args;

        if (config.verbose) {
            vOutput.write(cmd);
            vOutput.write("\n");
        }
        _status = T_BINARY;
        _proc = Process(cmd);

        if (_data.sections.contains("STDIN")) {
            _proc.putStdIn(_data.sections["STDIN"]);
        }

    }

    void finishBinary() {

        if (_proc.failed()) {
            _fail();
            crackResult = Result(false);
            output.write("binary failed to run\n");
        }
        else {
            nativeOut := _proc.getStdOut();
            nativeErr := _proc.getStdErr();

            // XXX right now, out stdout and stderr are merged. this will change when we
            // have an explicit stderr section
            if (nativeErr.size > 0)
                nativeOut = nativeOut + nativeErr;
            expect := _data.sections["EXPECT"];
            binaryResult = compareOutput(expect, nativeOut);
        }

        _proc.close();


    }

    void run() {

        if (_bDef.separateBinary()) {
            _testBinary = config.outDir.nameWithTrailing()+
                           _data.fInfo.basename(true);
        }

        StringWriter opts = {};

        // options for crack
        if (_data.sections.contains("OPTS")) {
            opts.write(_data.sections["OPTS"].rtrim());
        }

        if (_data.dirConfig) {
            opts.write(" ");
            opts.write(_data.dirConfig.options);
        }

        opts.write(_bDef.getCrackOptions(this));
        if (config.libPath) {
            opts.write(" -l ");
            opts.write(config.libPath);
        }

        // XXX template argv section
        cmd := FStr() `$(config.crackBin) -B $(_bDef.getName()) $(opts.createString()) $(_data.scriptName)`;

        // args for script
        if (_data.sections["ARGS"] && !_bDef.separateBinary()) {
            cmd = cmd + " -- " + _data.sections["ARGS"].rtrim();
        }

        if (config.verbose) {
            vOutput.write(cmd);
            vOutput.write("\n");
        }

        output.write(_bDef.getNick());
        output.write(": ");

        _status = T_CRACK;
        _proc = Process(cmd);

        if (!_bDef.separateBinary() && _data.sections.contains("STDIN")) {
            _proc.putStdIn(_data.sections["STDIN"]);
        }

    }

     void finishCrack() {

        compileOut := _proc.getStdOut();
        compileErr := _proc.getStdErr();
        _proc.close();

        // XXX right now, out stdout and stderr are merged. this will change when we
        // have an explicit stderr section
        if (compileErr.size > 0)
            compileOut = compileOut + compileErr;

        if (_bDef.separateBinary()) {
            if (_proc.getReturnCode() != 0) {
                // if return code is not 0, we'll be checking against error
                // output
                _fail();
                vOutput.write(FStr() `Return code: $(_proc.getReturnCode())`);
                vOutput.write(FStr() `Output [$compileErr]\n`);
                crackResult = Result(false);
            }
            else {
                _pass();
                crackResult = Result(true);
            }
            return;
        }

        expect := _data.sections["EXPECT"];
        crackResult = compareOutput(expect, compileOut);

    }


    int tick() {

        if (_status == T_FINISHED)
            return _status;

        if (_proc.isRunning())
            return _status;

        // we're in state CRACK or BINARY, and our process is done
        if (_status == T_CRACK) {
            finishCrack();
            // if we have a separate binary, launch it
            if (_bDef.separateBinary() && crackResult.pass)
                runBinary();
            else
                _status = T_FINISHED;
        }
        else if (_status == T_BINARY) {
            finishBinary();
            _status = T_FINISHED;
        }

        if (_status == T_FINISHED && vOutput.size)
            vOutput.write("\n");

        return _status;
    }

}

class JitTestHarness : BuilderTestHarness {

    oper init(CrackBuilderDef d, TestData data): BuilderTestHarness(d, data) { }

}

class NativeTestHarness : BuilderTestHarness {

    oper init(CrackBuilderDef d, TestData data): BuilderTestHarness(d, data) { }

}

//////////////////////////////

class JitBuilderDef : CrackBuilderDef {
    BuilderTestHarness newTestHarness(TestData d) {
        return JitTestHarness(this, d);
    }
    bool separateBinary() { return false; }
    String getName() { return "llvm-jit"; }
    String getNick() { return "JIT"; }
}

class NativeBuilderDef : CrackBuilderDef {
    BuilderTestHarness newTestHarness(TestData d) {
        return NativeTestHarness(this, d);
    }
    bool separateBinary() { return true; }
    String getName() { return "llvm-native"; }
    String getNick() { return "AOT"; }
    String getCrackOptions(BuilderTestHarness h) {
        return " -b out="+h._testBinary;
    }
}

// These are the list of builders we support in the test suite.
// The keys to this hash are used to specify which builders to run
// from the command line
TreeMap[String, CrackBuilderDef] builderDefList = { };
builderDefList["jit"] = JitBuilderDef();
builderDefList["native"] = NativeBuilderDef();
