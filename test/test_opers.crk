# tests of explicit operator invocation.
# Copyright 2009 Google Inc.

int tester;
void check(int val, byteptr failMsg) {
    if (tester != val)
        puts(failMsg);
}

class Foo {
    oper bind() { tester = 1 } 
    oper release() { tester = 2; }
    int oper [](uint index) { tester = 3; return 0; }
    void oper []=(uint index, int val) { tester = 4; }
    int oper -(Foo other) { tester = 5; return 0; }
    int oper ~() { tester = 6; return 0; }
    int oper !() { tester = 7; return 0; }
    int oper --x() { tester = 8; return 0; }
    int oper ==(Foo other) { tester = 9; return 0; }
    int oper !=(Foo other) { tester = 10; return 0; }
    int oper <(Foo other) { tester = 11; return 0; }
    int oper <=(Foo other) { tester = 12; return 0; }
    int oper >=(Foo other) { tester = 13; return 0; }
    int oper >(Foo other) { tester = 14; return 0; }
    int oper +(Foo other) { tester = 15; return 0; }
    int oper /(Foo other) { tester = 16; return 0; }
    int oper *(Foo other) { tester = 17; return 0; }
    int oper %(Foo other) { tester = 18; return 0; }
    oper init() { tester = 19; }
    oper del() { tester = 20; }
    int oper -() { tester = 21; return 0; }
    int oper >>=(int i) { tester = i; return 100; }
}

Foo f;
f.oper bind(); check(1, 'FAILED bind');
f.oper release(); check(2, 'FAILED release');
f.oper [](100); check(3, 'FAILED []');
f.oper []=(100, 200); check(4, 'FAILED []=');
f.oper -(f); check(5, 'FAILED minus');
f.oper ~(); check(6, 'FAILED tilde');
f.oper !(); check(7, 'FAILED bang');
f.oper --x(); check(8, 'FAILED decr');
f.oper ==(f); check(9, 'FAILED ==');
f.oper !=(f); check(10, 'FAILED !=');
f.oper <(f); check(11, 'FAILED <');
f.oper <=(f); check(12, 'FAILED <=');
f.oper >=(f); check(13, 'FAILED >=');
f.oper >(f); check(14, 'FAILED >');
f.oper +(f); check(15, 'FAILED +');
f.oper /(f); check(16, 'FAILED /');
f.oper *(f); check(17, 'FAILED *');
f.oper %(f); check(18, 'FAILED %');
f.oper init(); check(19, 'FAILED init');
f.oper del(); check(20, 'FAILED del');
f.oper >>=(21); check(21, 'FAILED >>=');
f >>= 22; check(22, 'FAILED >>= (normal syntax)');

# we only need to check broad classes of the implicit operators - the logic is 
# all the same.
f == f; check(9, 'FAILED implicit ==');
!f; check(7, 'FAILED implicit !');
-f; check(21, 'FAILED implicit unary -');
f - f; check(5, 'FAILED implicit binary -');

# test of integer augmented assignment
int x;
x += 1;
if (x != 1) puts('+= failed');
x -= 1;
if (x != 0) puts('-= failed');
x = 1;
x *= 5 + 5;
if (x != 10) puts('*= failed');
x /= 5;
if (x != 2) puts('/= failed');
x = 10;
if ((x %= 3) != 1) puts('%= failed');
x = 3;
if ((x &= 2) != 2) puts('&= failed');
if ((x |= 1) != 3) puts('|= failed');
if ((x ^= 6) != 5) puts('^= failed');
if ((x <<= 2) != 20) puts('<<= failed');
if ((x >>= 2) != 5) puts('>>= failed');

puts('ok');
