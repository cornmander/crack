
import crack.lang AppendBuffer, CString;
import crack.io Formatter, Writer, cout;
import crack.cont.array Array, ArrayData;

class StringArray : Array[String] {

    # memory management for null terminated strings from makePrimArray
    # otherwise unused
    ArrayData[CString] __nullTermStore = null;

    oper init(uint size) : Array[String](size) {}
    oper init() {}    
    
    void writeTo(Writer out) {
        out.write('[');
        bool first = true;
        for (elem :in this) {
            if (!first)
                out.write(', ');
            else
                first = false;
            out.write(elem.getRepr());
        }
        out.write(']');
    }

    ## Returns a primitive array based on the array (useful for communicating 
    ## to C bindings). The strings will be null terminated.
    ## @unsafe
    array[byteptr] makePrimArray() {
        size := count();
        # we initialize the null term store to the full size of the string
        # array, but only use those indexes that actually need to be copied
        # for null termination
        __nullTermStore = ArrayData[CString](size);
        prim := array[byteptr](size);
        for (int i; i < size; ++i) {
            # if already null terminated (CString or StaticString), use
            # direct buffer
            if (this[i].isa(CString) || this[i].isa(StaticString)) {
                prim[i] = this[i].buffer;
            }
            # otherwise, copy it and manage the null terminated version
            # locally
            else {
                mcs := CString(this[i]);
                mcs.oper bind();
                __nullTermStore.rep[i].oper release();
                __nullTermStore.rep[i] = mcs;
                prim[i] = __nullTermStore.rep[i].buffer;
            }
        }
        return prim;
    }

    uint __countBytes() {
        uint total;
        for (elem :in this)
            total += elem.size;
        return total;
    }
    
    ## Join all of the elements into a single string with elements separated 
    ## by 'sep'
    String join(String sep) {
        
        # deal with the empty case
        size := count();
        if (!size)
            return '';
        
        # figure out how much space we need
        total := __countBytes() + sep.size * (size - 1);
        
        AppendBuffer buf = {total};
        first := true;
        for (elem :in this) {
        
            # add the separator for everything but the first string.
            if (first)
                first = false;
            else
                buf.extend(sep);

            buf.extend(elem);
        }
        
        return String(buf, true);
    }
        
}

## Split the string into an array of words delimited by one of the given array of 
## characters
StringArray split(String val, String ws) {

    # rule out the simple case
    if (val.size == 0)
        return StringArray![''];

    # set to true if we are currently in a block of non-whitespace characters
    bool inWord = true;
    
    # figure out how big we need to make the array
    uint count = 1;
    for (uint i = 0; i < val.size; ++i) {
        cur := val[i];
        if (ws.lfind(cur) != -1) {
            inWord = !inWord;
            if (inWord)
                ++count;
        }
    }
    if (!inWord) ++count;

    result := StringArray(count);
    
    # do it again, this time create substrings
    int start = 0;
    inWord = true;
    for (int i = 0; i < val.size; ++i) {
        cur := val[i];
        gotSpace := ws.lfind(cur) != -1;
        if (gotSpace && inWord) {
            word := val.slice(start, i);
            result.append(word);
            inWord = false;
        } else if (!gotSpace && !inWord) {
            # first non-space character after a block of whitespace, reset start
            start = i;
            inWord = true;
        }
    }

    # add the last word
    if (inWord)
        result.append(val.slice(start));
    else
        result.append('');

    return result;
}

## Split the string into an array of words delimited by a sequence of 
## ascii whitespace characters.
StringArray split(String val) {
    return split(val, ' \t\n\r');
}

## Split the string into an array of words delimited by the given character
StringArray split(String val, byte c) {
    return split(val, String(byteptr(array[byte]![c]), 1, true));
}


## Pads a string with the provided bytes so it has the given width
String ljust(String text, uint width, byte c){
    if (text.size >= width) return text;
    return text + String(width - text.size, c);
}

## Pads a string with spaces so it has the given width
String ljust(String text, uint width){
    return ljust(text, width, b' ');
}

## Prepends a string with the provided bytes so it has the given width
String rjust(String text, uint width, byte c){
    if (text.size >= width) return text;
    return String(width - text.size, c) + text ;
}

## Prepends string with spaces so it has the given width
String rjust(String text, uint width){
    return  rjust(text, width, b' ');
}

## Centers string with the provided bytes so it has the given width
String center(String text, uint width, byte c){
    if (text.size >= width) return text;
    sWidth := width - text.size;
    lwidth := sWidth/2;
    rwidth := sWidth/2 + sWidth%2;
    return String(lwidth, c) + text + String(rwidth, c);
}

## Centers string with spaces so it has the given width
String center(String text, uint width){
    return  center(text, width, b' ');
}
