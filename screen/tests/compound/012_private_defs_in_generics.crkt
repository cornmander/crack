%%TEST%%
Private definitions used by generics.
%%ARGS%%
%%FILE%%
import systest test;
test.preBootstrap = true;
test.mod('mod1', I"
    void f() {
        puts('ok');
    }
    void x() {}
    ");
test.mod('mod2', I"
    import mod1 f;

    class A[T] {
        void g() {
            f();
        }
    }
    ");
test.main(I"
    import mod2 A;
    A[int] a = {};
    a.g();
    ");
test.addTrace('Caching');
test.run();

# Rewrite mod2 to make several changes that should not affect the interface,
# re-run test to verify that we don't recompile main.
test.mod('mod2', I"
    import mod1 f, x;

    void _hidden() {}
    class A[T] {
        void g() {
            f();
        }
    }
    ");
test.run();

# Rewrite main to force reinstantiation of the generic A.
test.main(I"
    import mod2 A;
    A[float] a = {};
    a.g();
    ");
test.run();

%%REXPECT%%
err: mod2 out-of-date or not in the cache.  Building from: ./mod2.crk
err: mod1 out-of-date or not in the cache.  Building from: ./mod1.crk
out: ok
terminated: success
err: digests don't match for mod2.crk got .*
err:   current = .*
err:   module: mod2
err: mod2 out-of-date or not in the cache.  Building from: ./mod2.crk
err: Reusing cached module mod1
err: digests don't match for mod2.crk got .*
err:   current = .*
err:   module: mod2.A\[.builtin.int\]
err: Source for mod2.A\[.builtin.int\] not found.  Not compiling it at this time.
err: digests don't match for mod2.crk got .*
err:   current = .*
err:   module: mod2.A\[.builtin.int\]
err: Reusing cached script .*/main.crk
out: ok
terminated: success
err: digests don't match for .*/main.crk got .*
err:   current = .*
err:   module: .main..*main_2ecrk
err: Reusing cached module mod1
err: Reusing cached module mod2
out: ok
terminated: success
%%STDIN%%
