# Copyright 2010 Google Inc.
# tests of bitwise operations.

import crack.io cout;

void expect(int32 actual, String code, int32 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(uint32 actual, String code, uint32 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(byte actual, String code, byte expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(uint64 actual, String code, uint64 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(int64 actual, String code, int64 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

expect(byte(1 | 2), "byte: 1 | 2", byte(3));
expect(int32(1) | int32(2), "int32: 1 | 2", int32(3));
expect(uint32(1) | uint32(2), "uint32: 1 | 2", 3);
expect(int64(1) | int64(2), "int64: 1 | 2", int64(3));
expect(uint64(1) | uint64(2), "uint64: 1 | 2", 3);

expect(byte(7) & byte(1), "byte: 7 & 1", 1);
expect(int32(7) & int32(1), "int32: 7 & 1", 1);
expect(uint32(7) & uint32(1), "uint32: 7 & 1", 1);
expect(int64(7) & int64(1), "int64: 7 & 1", 1);
expect(uint64(7) & uint64(1), "uint64: 7 & 1", 1);

expect(byte(1) << byte(4), "byte: 1 << 4", 16);
expect(int32(1) << int32(4), "int32: 1 << 4", 16);
expect(uint32(1) << uint32(4), "uint32: 1 << 4", 16);
expect(int64(1) << int64(4), "int64: 1 << 4", 16);
expect(uint64(1) << uint64(4), "uint64: 1 << 4", 16);

expect(int32(-4) >> int32(1), "int32: -4 >> 1", -2);
expect(uint32(-4) >> uint32(1), "-4 >> 1", 2147483646);

expect(int64(-4) >> 1, "int64: -4 >> 1", -2);
expect(uint64(-4) >> 1, "uint64: -4 >> 1", 9223372036854775806);

expect(1 | 1 << 1, "1 | 1 << 1", 3);
expect(1 & 1 << 1, "1 & 1 << 1", 0);
expect(2 | 3 & 1, "2 | 3 & 1", 3);
expect(2 | 3 ^ 6, "2 | 3 ^ 6", 7);
expect(2 ^ 3 & 1, "2 ^ 3 & 1", 3);
cout `ok\n`;


