## Copyright 2011 Google Inc.
## Crack Virtual Filesystem (it's not very virtual yet)

import crack.runtime basename, chdir, errno, fileExists, free, fileRemove,
    getcwd, getDirEntry, mkdir, open, opendir, readdir, Stat, stat, Dir,
    DirEntry, O_CREAT, O_TRUNC, O_RDONLY, O_WRONLY, PATH_MAX, S_IFDIR, S_IFLNK;
import crack.sys strerror;
import crack.io cout, FStr, OwningFDReader, OwningFDWriter, Reader, Writer;
import crack.lang Buffer, CString, Exception, InvalidArgumentError,
    InvalidStateError, ManagedBuffer, Formatter;
import crack.lang SystemError;
import crack.io.readers FullReader;
@import crack.ann define;

## This gets raised when referencing a path that doesn't exist.
class NoEntryError : Exception {
    oper init(String text) : Exception(text) {}
}

## This gets raise when the process doesn't have the authority to perform the
## request operation.
class AccessDeniedError : Exception {
    oper init(String text) : Exception(text) {}
}

class Path;

## Iterates over a sequence of Path objects.
@abstract class PathIter {
    PathIter iter() { return this; }

    @abstract Path elem();
    @abstract bool next();
}

## A path is a node in a virtual filesystem.  It can correspond to a
## directory, a file, or the root of the filesystem.
@abstract class Path {

    ## Returns a reader for the path.  The path must be readable.
    @abstract Reader reader();

    ## Returns a writer for the path.  The path must be writable.
    @abstract Writer writer();

    ## Make a directory corresponding to the path.
    @abstract void makeDir();

    FullReader makeFullReader() {
        return FullReader(reader());
    }

    String readAll() {
        src := FullReader(reader());
        return src.readAll();
    }

    ## write the entire contents of the file.
    void writeAll(Buffer data) {
        writer().write(data);
    }

    @abstract Path oper [](String child);

    @abstract Path _createNode(String path);

    @abstract Path oper /(String other);

    ## Returns true if the object exists, false if not.
    @abstract bool exists();

    ## Returns true if the path is a directory (that is, if "children()" can
    ## be used for iteration)
    @abstract bool isDir();

    ## Returns true if the path is a symlink.
    @abstract bool isLink();

    ## Deletes the object at the path.
    @abstract void delete();

    ## Returns the short (unqualified) name of the Path.  This is the name
    ## relative to its container.
    @abstract String getName();

    ## Returns the fully qualified name of the Path.
    @abstract String getFullName();

    ## Returns the size of the object.
    @abstract uint64 getSize();

    ## Returns an interator over the children of the path.  (Children may not
    ## be assumed to be in any particular order)
    @abstract PathIter children();
}

class RealPathIter : PathIter {
    Path __container;
    Dir __dir;
    DirEntry __entry;

    bool _readNext() {
        if (!__dir)
            throw InvalidStateError('Iterating past the end of the directory');

        if (!readdir(__dir)) {
            __dir = null;
            return false;
        } else {
            return true;
        }
    }

    oper init(Path container) : __container = container,
        __dir = opendir(CString(container.getFullName()).buffer),
        __entry = __dir ? getDirEntry(__dir) : null {

        if (__dir)
            next();
    }

    Path elem() { return __container[StaticString(__entry.name)]; }

    ## Returns true if 'name' is '.' or '..'
    @static bool __isSpecial(byteptr name) {
        return name[0] == b'.' &&
               (name[1] == 0 || name[1] == b'.' && name[2] == 0);
    }

    bool next() {
        while (true) {
            if (!_readNext()) {
                __dir = null;
                return false;
            } else if (__isSpecial(__entry.name)) {
                continue;
            } else {
                return true;
            }
        }
        return false;
    }

    bool isTrue() { return __dir; }

}

## A real filesystem path.
class RealPath : Path {

    CString __path;

    oper init(String realPath) : __path = CString(realPath) {}
    oper init(CString realPath) : __path = realPath {}

    void formatTo(Formatter fmt) {
        fmt.format(__path);
    }

    Path oper [](String child) {
        if (child == '..' || child == '.')
            throw InvalidArgumentError(
                'Parent directory access not supported'
            );
        return RealPath(__path + '/' + child);
    }

    Path _createNode(String path) {
        return this[path];
    }

    Path oper /(String other) {
        return this[other];
    }

    bool exists() {
        return fileExists(__path.buffer);
    }

    @define __stater(funcName, constName) {
        bool funcName() {
            Stat st = {};
            rc := stat(__path.buffer, st);
            result := !rc && st.st_mode & constName;
            free(st);
            return result;
        }
    }

    @__stater(isDir, S_IFDIR)
    @__stater(isLink, S_IFLNK)

    Reader reader() {
        fd := open(__path.buffer, O_RDONLY, 0);
        if (fd == -1)
            throw SystemError('Opening ' + __path);
        return OwningFDReader(fd);
    }

    Writer writer() {
        fd := open(__path.buffer, O_CREAT | O_WRONLY | O_TRUNC, 0777);
        if (fd == -1)
            throw SystemError(FStr() `opening $__path`);
        return OwningFDWriter(fd);
    }

    void makeDir() {
        mkdir(__path.buffer, 0o777);
    }

    void delete() {
        if (fileRemove(__path.buffer))
            throw SystemError(FStr() `Removing $__path`);
    }


    PathIter children() { return RealPathIter(this); }
    String getFullName() { return __path; }
    String getName() { return String(basename(__path.buffer)); }
    uint64 getSize() {
        Stat st = {};
        rc := stat(__path.buffer, st);
        result := uint64(st.st_size);
        free(st);
        if (rc)
            throw SystemError(FStr() `stating $__path`);
        return result;
    }

}

## This is a wrapper class that allows us to define the current directory
## object.
class _CWD : Path {
    Path __path;

    CString __getcwd() {
        ManagedBuffer buf = {PATH_MAX};
        if (getcwd(buf.buffer, buf.size) is null) {
            err := FStr() `Unable to get current directory: $(strerror())`;
            throw SystemError(err, errno());
        }

        return CString(buf, true);
    }

    oper init() : __path = RealPath(__getcwd())  {}

    ## Sets the current directory to the 'other'.  'other' may be either an
    ## absolute path or a path relative to the current working directory.  The
    ## "." and ".." special paths can be used to change the director to the
    ## current directory and parent directory, respectively.
    void set(CString other) {
        if (chdir(other.buffer))
            throw SystemError(FStr() `Unable to chdir to $other`, errno());
        __path = RealPath(__getcwd());
    }

    ## See set(CString).
    void set(String other) {
        set(CString(other));
    }

    ## See set(CString).  This is the same only it uses an existing path.
    void set(Path other) {
        set(other.getFullName());
    }

    Reader reader() { return __path.reader(); }
    Writer writer() { return __path.writer(); }
    void makeDir() { __path.makeDir(); }
    Path oper [](String child) { return __path[child]; }
    Path _createNode(String path) { return __path._createNode(path); }
    Path oper /(String other) { return __path/other; }
    bool exists() { return __path.exists(); }
    bool isDir() { return __path.isDir(); }
    bool isLink() { return __path.isLink(); }
    void delete() { return __path.delete(); }
    String getName() { return __path.getName(); }
    String getFullName() { return __path.getFullName(); }
    uint64 getSize() { return __path.getSize(); }
    PathIter children() { return __path.children(); }
}

## Contains a path object for the root of the real filesystem.
const RealPath sysfs = {''};

## A path object that contains the current working directory.
const _CWD cwd = {};

## See makePath(String)
Path makePath(CString path) { return RealPath(path); }

## Create a Path object for the specified string path.
## If 'path' is not an absolute path, the Path object returned will correspond
## to a filename relative to the current working directory.
Path makePath(String path) { return RealPath(path); }
