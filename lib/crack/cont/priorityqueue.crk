# Copyright 2011 Google Inc.
# Copyright 2011 Shannon Weyrick <weyrick@mozek.us>
# Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Generic priority queue implementation

import crack.lang Formatter;
import crack.cont.array Array;
import crack.io Writer, cout;
import crack.algorithm HeapPrim;

## A priority queue backed by a dynamic array which maintains the max-heap
## property
class PriorityQueue[Elem] {

    Array[Elem] __data = { };

    void formatTo(Formatter fmt) {
        __data.formatTo(fmt);
    }

    ## Pops the next element off the queue.
    @final Elem pop() {
        if (__data.count() == 0)
            return null;
        __data.swap(0, __data.count() - 1);
        Elem e = __data.pop();
        if (__data.count() > 1)
            HeapPrim[typeof(__data)].maxHeapify(__data, 1, __data.count());
        return e;
    }

    ## Push a new element onto the queue.
    @final void push(Elem e) {
        __data.append(e);
        for (i := __data.count();
             i > 1 && (__data[(i >> 1) - 1] < __data[i - 1]);
             i = i >> 1
             ) {
             //cout `i: $i == $(__data[i-1]), parent: $(i>>1) == $(__data[(i>>1)-1])\n`;
            __data.swap(i - 1, (i >> 1) - 1);
        }
    }

    ## Returns the number of elements in the queue.
    @final uint count() {
        return __data.count();
    }

    ## Returns the element at the front of the queue (without removing it).
    @final Elem top() {
       return __data[0];
    }

    ## Delete all elements from the queue.
    @final void clear() {
        __data.clear();
    }
}
