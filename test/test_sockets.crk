
import crack.cont.array Array;
import crack.lang die, ManagedBuffer;
import crack.io cout, FStr;
import crack.net resolve, Address, InetAddress, Socket, Poller, PollEvent, 
    AF_INET, INADDR_ANY, POLLIN, POLLERR, SOCK_STREAM;
import crack.time TimeDelta;

# create a server socket, bind to a port and listen.
srv := Socket(AF_INET, SOCK_STREAM, 0);
srv.setReuseAddr(true);
if (!srv.bind(InetAddress(INADDR_ANY, 9923)))
    die('bind failed');
if (!srv.listen(5))
    die('listen failed');

# create a client socket
cln := Socket(AF_INET, SOCK_STREAM, 0);
if (!cln.connect(InetAddress(127, 0, 0, 1, 9923)))
    die('connect failed');

# get the new connection on the server side.
accepted := srv.accept();

# send a string from the server, make sure we can receive it in the client.
cln.send('test string', 0);
ManagedBuffer buf = {1024};
buf.size = uint(accepted.sock.recv(buf, 0));
fromClient := String(buf, true);
if (fromClient != 'test string')
    die ('did not receive "test string" from client');

# send a string from client to server
accepted.sock.send('another test string', 0);
buf = ManagedBuffer(1024);
buf.size = uint(cln.recv(buf, 0));

fromServer := String(buf, false);
if (fromServer != 'another test string')
    die('did not receive "another test string" from server');

# test Pollers
poller := Poller();
poller.add(accepted.sock, POLLIN | POLLERR);
poller.add(cln, POLLIN | POLLERR);
cln.send('to server', 0);
poller.wait(null);
PollEvent p;
bool ok;
while (p = poller.nx()) {
    if (!(p.pollable is accepted.sock)) {
        cout `fd = $(p.fd), events = $(p.events)\n`;
        die("didn't poll the server");
    } else {
        ok = true;
    }
}

if (!ok)
    die("didn't get the server back");

# clear the data from the accepted socket
buf.size = 1024;
accepted.sock.recv(buf, 0);

accepted.sock.send('to client', 0);
poller.wait(null);
ok = false;
while (p = poller.nx()) {
    if (!(p.pollable is cln))
        die("didn't poll the client");
    else
        ok = true;
}

if (!ok)
    die("didn't get the client back");

# clear the data
cln.recv(buf, 0);

# test an empty timeout
if (poller.wait(TimeDelta(0, 0)) != 0)
    die("waiting on a zero timeout did not return zero!");

# TODO: this has an external dependency on the ability to reolve localhost, 
# please fix.
localhost := resolve('localhost');
if (FStr() `$localhost` != '[127.0.0.1:0]')
    die('FAILED localhost lookup formatting');
if (localhost != Array[Address]![InetAddress(127, 0, 0, 1, 0)])
    die('FAILED localhost lookup');

cout `ok\n`;
