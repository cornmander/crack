%%TEST%%
nested overload type order
%%ARGS%%
%%FILE%%
# This test exercises the code that constructs a new overload by adding a list
# of types to an existing overload which is called when creating an overload
# from a nested context.  As so happens, this code was originally broken
# because it failed to sort the type list.  Checking the name is a sufficient
# verification.
import test.preutil streq;

void f() { puts('first f()'); }
void f(int i) { puts('first f(int)'); }
if (1) {
    if (!streq(typeof(f).name,
               'Overload[.builtin.function[.builtin.void,.builtin.int], '
                '.builtin.function[.builtin.void]]'
               )
        )
        puts('Bad nested overload type name');
    else
        puts('ok');
}
%%EXPECT%%
ok
%%STDIN%%
