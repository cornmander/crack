// Classes for io streams
// Copyright 2010 Shannon Weyrick <weyrick@mozek.us>

import crack.io cerr, XWFormatter, XWriter;
import crack.lang die, ManagedBuffer, FreeBase;
import crack.exp.bindings Opaque;

import "libc.so.6" fopen, fread, fclose;
import "libcrack-runtime.so"  _crack_fnmatch;

uint _READ_SIZE = 512;

class FILE: Opaque { }

FILE fopen(byteptr fn, byteptr mode);
int fclose(FILE f);
uint fread(voidptr buf, uint size, uint nmemb, FILE f);
int _crack_fnmatch(byteptr pattern, byteptr string);

class FileInfo: Object {

    String name;

    oper init(String name0): name(name0) { }
    oper init(byteptr name0): name(name0) { }

    bool matches(String pattern) {
        return (_crack_fnmatch(pattern.buffer, name.buffer) == 0);
    }

    void writeTo(XWriter out) {
        XWFormatter(out) `$name`;
    }

}

// no memory management
class Openable: VTableBase {

    bool _isValid = false; // implies isOpened
    bool _isOpened = false;

    void _open() { }

    bool isValid() {
        if (!_isOpened)
            _open();
        return _isValid;
    }

    bool isOpened() { return _isOpened; }

}

// interface
class _StreamBase : Openable {

    void close() { }

    oper del() {
        if (_isOpened && _isValid)
            close();
    }

    void seek(uint64 offset, int whence) { }
    uint64 tell() { return 0; }

    bool seekable() { return false; }
    bool writeable() { return false; }
    bool readable() { return false; }

}

// interface
class _StreamReader: VTableBase {

    bool readable() { return true; }

    String readline() {
        die('_StreamReader.readline called');
        return String(); // XXX
    }

}

// interface
class _StreamWriter: VTableBase {

    void flush() { }

    void write(byteptr b, uint size) {  }

    bool writeable() { return true; }

    void writeline(String line) { }

    void truncate(uint size) { }

}

/*
class UrlStream : _StreamReader {

}
*/


class File : _StreamBase, 
             _StreamReader, 
             _StreamWriter,
             FileInfo {

    String _mode;
    FILE _fd = null;

    oper init(String name0, String mode0): FileInfo(name0),
                                           _mode(mode0) {
        _fd = fopen(name.buffer, _mode.buffer);
        if (_fd is null) {
            _isValid = false;
            _isOpened = false;
        }
    }

    String readline() {

        if (!_isValid)
            return null;

        _buf := ManagedBuffer(_READ_SIZE);
        len := fread(_buf.buffer, 1, _READ_SIZE, _fd);
        return String(_buf, len); // copies

    }

    void close() {
        if (_isOpened)
            fclose(_fd);
    }

}


