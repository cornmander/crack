
-   Reference counted objects
    -   Object base class
    -   implicit call to "bind()" before return and on assignment of a 
        variable value
    -   implicit call to "release()" for all intermediate objects
    
-   cleanup:
    -   combine FuncDef and OverloadDef into a base class with a virtual 
        matches() for arg list defs.
    -   need to be able to define "oper" funcs.  Make "release", "init" and 
        "bind" oper funcs.
-   function arguments are currently SSA values, which means this won't work:
    type func(int a) { a = 100; }
-   nested compilation so I can write lots of unit tests (shell scripted unit 
    tests are working just fine)


Roadmap
-------

for 0.1:
-   the "!" operator
-   modules
-   extern declarations of C functions
-   virtual functions
-   expression level cleanups of temporary objects
-   productive/non-productive expressions
-   composition of constructors/destructors
-   the "oper" keyword
-   "Foo x = {1, 2}" construction syntax.
-   the '`' operator
-   break & continue
-   short circuit logic operators

for 1.0:
-   doxen
-   first class functions
-   keyword arguments
-   sequence construction 
-   type inference
-   for/in loops


