// Copyright (C) 2010 Conrad D. Steenberg
// Lincensed under LGPLv3

// test of math library
import crack.io cout, StringFormatter;
import crack.exp.file File;

// import all the symbols in the module
import crack.math  sin, cos, tan, asin, acos, atan, sinh, cosh, tanh, asinh,
                    acosh, atanh, atoi, atof, strtof, usecs, exp, exp2,
                    ilogb, log, log10, log1p, log2, cbrt, abs, hypot,  sqrt,
                    erf, erfc, lgamma, tgamma, ceil, floor, nearbyint, rint,
                    round, trunc, fpclassify, isfinite, isinf, isnan,
                    isnormal, sign, fmod, remainder, copysign, nextafter,
                    dim, pow, testexcept, clearexcept, errno, setErrno, 
                    max, min,
                    HUGE_VAL, INFINITY, NAN, FP_INFINITE, FP_NAN,
                    FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_ILOGB0, FP_ILOGBNAN,
                    ALL_EXCEPT, INVALID, DIVBYZERO, OVERFLOW,
                    UNDERFLOW, ERANGE,  
                    E, LOG2E, LOG10E, LN2, LN10, LNPI, PI, PI_2, PI_4, PI1, 
                    PI2, SQRTPI2, SQRT2, SQRT3, SQRT1_2, SQRTPI, GAMMA;
                    

fmt := StringFormatter();

// Generate using math module
trig_inputs_float_32:=array[float32](41);
trig_inputs_float_64:=array[float64](41);
trig_inputs_float:=array[float](41);

// Populate the arrays
float32 val32=-2.0*PI;
float32 delta32=0.1*PI;
float64 val64=-2.0*PI;
float64 delta64=0.1*PI;
float val=-2.0*float(PI);
float delta=0.1*float(PI);

uint i=0;
uint intervals=40;
while (i<=intervals){
  val=float(i)*delta;
  trig_inputs_float[i]=val+float(i)*delta;
  trig_inputs_float_32[i]=val32+float32(i)*delta32;
  trig_inputs_float_64[i]=val64+float32(i)*delta64;
  i++;
}

i=0;
while (i<=intervals){
  fmt `f32[$i] = \t$(trig_inputs_float_32[i]): \t sin = $(sin(trig_inputs_float_32[i])) \t cos = $(cos(trig_inputs_float_32[i])) \t tan = $(tan(trig_inputs_float_32[i]))\n`;
  fmt `f64[$i] = \t$(trig_inputs_float_64[i]): \t sin = $(sin(trig_inputs_float_64[i])) \t cos = $(cos(trig_inputs_float_64[i])) \t tan = $(tan(trig_inputs_float_64[i]))\n`;
  fmt `fsys[$i] = \t$(trig_inputs_float[i]): \t sin = $(sin(trig_inputs_float[i])) \t cos = $(cos(trig_inputs_float[i])) \t tan = $(tan(trig_inputs_float[i]))\n`;
  i++;
}

resultString:=fmt.createString();

cout `ok\n`;
