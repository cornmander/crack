// Algorithms
// Copyright 2011 Shannon Weyrick <weyrick@mozek.us>
// Copyright 2011-2012 Google Inc.
// 
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
// 
import crack.lang cmp;
import crack.io cout;

## Base class version of quick-sort, can be applied to primitive arrays.
class QuickSortPrim[SeqT] {

    alias Elem = typeof(SeqT(1)[0]);
    alias CmpFunc = function[int, Elem, Elem];

    @static
    void _swap(SeqT A, uintz l, uintz r){
        temp := A[l];
        A[l] = A[r];
        A[r] = temp;
    }

    @static int defaultCmp(Elem a, Elem b) {
        return cmp(a, b);
    }

    @static void _quickSort3(SeqT A, intz l, intz r, CmpFunc cmp) {

        // this is based on a 3-partition version from a talk by Robert Sedgewick
        // and Jon Bentley
        // http://www.cs.princeton.edu/~rs/talks/QuicksortIsOptimal.pdf
        intz i = l-1;
        intz j = r;
        intz p = l-1;
        intz q = r; 

        if (r <= l)
            return;
        
        # 'v' is our pivot - set 'v' to the right-most value in the span
        v := A[r];

        while (true) {
            # set i to the leftmost index that is >= v
            while (cmp(A[++i], v) < 0);
            
            # set j to the rightmost index left of v that is <= v
            while (cmp(v, A[--j]) < 0) 
                if (j == l) 
                    break;

            # if we've met or passed in the middle, we're done
            if (i >= j) 
                break;
            
            # swap i and j to put them on the correct sides of the pivot
            _swap(A, i, j);
            
            # if the i and j values are equal to the key, migrate them to the 
            # far left or right of the range.
            if (cmp(A[i], v) == 0) { 
                p++; 
                _swap(A, p, i);
            }
            if (cmp(v, A[j]) == 0) { 
                q--; 
                _swap(A, j, q);
            }
        }

        # move the pivot to the center
        _swap(A, i, r);
        
        # set i and j to immediately left and right of center
        j = i-1; 
        i = i+1;

        # move all of the far left elements equal to the pivot to left of 
        # center.
        for (k := l; k < p; k++) {
            if (k != j) {
                _swap(A, k, j);
            }
            j--;
        }

        # move all of the far right elements equal to the pivot to right of 
        # center.
        for (k := r-1; k > q; k--) {
            _swap(A, i, k);
            i++;
        }
        
        _quickSort3(A, l, j, cmp);
        _quickSort3(A, i, r, cmp);
        
    }

    @static
    void sort(SeqT A, uintz count) {
        if (count > 1)
            _quickSort3(A, 0, count - 1, defaultCmp);
    }

    @static
    void sort(SeqT A, uintz count, CmpFunc cmp) {
        if (count > 1)
            _quickSort3(A, 0, count - 1, cmp);
    }

}

## Quick-sort.  SeqT must have [], []= and count()
class QuickSort[SeqT] : QuickSortPrim[SeqT] {
    @static void sort(SeqT A) {
        if (A.count() > 1)
            _quickSort3(A, 0, A.count() - 1, defaultCmp);
    }

    @static void sort(SeqT A, CmpFunc cmp) {
        if (A.count() > 1)
            _quickSort3(A, 0, A.count() - 1, cmp);
    }
}

## Insertion sort primitive.  Can be used on primitive arrays.
class InsertionSortPrim[Elem] {

    @static
    void _swap(Elem A, uintz l, uintz r){
        temp := A[l];
        A[l] = A[r];
        A[r] = temp;
    }

    @static
    void _insertionSort(Elem A, uintz count) {
        if (count > 1) {
            uintz j = 1;
            uintz i;
            while (j < count) {
                key := A[j];
                i = j-1;
                while (cmp (A[i], key) > 0) {
                    _swap(A, i+1, i);
                    if (i == 0)
                        break;
                    i--;
                }
                A[i+1] = key;
                j++;
            }
        }
    }

    @static
    void sort(Elem A, uintz count){
        _insertionSort(A, count);
    }
}

## Insertion sort.  Requires [], []= and count().
## Usage: typeof(seq).sort(seq);
class InsertionSort[SeqT] : InsertionSortPrim[SeqT] {
    @static void sort(SeqT A) {
        _insertionSort(A, A.count());
    }
}


## Heap routines
class HeapPrim[Elem] {

    @static
    void _swap(Elem A, uintz l, uintz r){
        --l; --r;
        temp := A[l];
        A[l] = A[r];
        A[r] = temp;
    }

    @static
    bool isMaxHeap(Elem A, uintz count) {
        // for i:=1..count, assert A[Parent(i)] >= A[i]
        for (i := count; i > 1; --i) {
            parent := i >> 1;
            if (A[parent-1] < A[i-1]) {
                return false;
            }
        }
        return true;
    }

    ## index i is 1 based, not 0 based
    @static
    void maxHeapify(Elem A, uintz i, uintz count) {
        uintz l = i << 1;
        uintz r = l+1;
        uintz largest;
        if (l <= count && A[l-1] > A[i-1])
            largest = l;
        else
            largest = i;
        if (r <= count && A[r-1] > A[largest-1])
            largest = r;
        if (largest != i) {
            _swap(A, i, largest);
            maxHeapify(A, largest, count);
        }
    }

    @static
    void buildMaxHeap(Elem A, uintz count) {
        for (i := count >> 1; i > 0; --i) {
            maxHeapify(A, i, count);
        }
    }
}

## Heaps.  Requires [], []= and count().
class Heap[SeqT] : HeapPrim[SeqT] {
    @static
    void buildMaxHeap(SeqT A) {
        buildMaxHeap(A, A.count());
    }

    @static
    bool isMaxHeap(SeqT A) {
        return isMaxHeap(A, A.count());
    }
}

class HeapSortPrim[Elem] : HeapPrim[Elem] {
    @static
    void _heapSort(Elem A, uintz count) {
        if (count > 1) {
            heapSize := count;
            for (i := count; i > 1; --i) {
                _swap(A, 1, i);
                heapSize--;
                maxHeapify(A, 1, heapSize);
            }
        }
    }
    
    @static
    void sort(Elem A, uintz count) {
        if (!isMaxHeap(A, count))
            buildMaxHeap(A, count);
        _heapSort(A, count);
    }
}

class HeapSort[SeqT] : HeapSortPrim[SeqT] {
    @static
    void sort(SeqT A) {
        _heapSort(A, A.count());
    }
}

