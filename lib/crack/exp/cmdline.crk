// Command line argument processor
// Copyright 2011 Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.lang die, cmp, free; 
import crack.strutil ljust;
import crack.cont.array Array;
import crack.math strtoi, strtof;
import crack.lang Exception, InvalidArgumentError, BadCastError, IndexError;
import crack.sys argv;
import crack.io cout, StringFormatter, FStr, Writer;
import crack.strutil split, StringArray;

StringArray typeNames = ["string", "int", "float", "bool"];
uint CMD_STR = 0;
uint CMD_INT = 1;
uint CMD_FLOAT = 2;
uint CMD_BOOL = 3;
uint NOINDEX = 0xffffffff; // Completely arbitrary large number

class Option {
   String long;
   String short;
   String desc;
   uint type;
   uint pos = NOINDEX; // index in option array
   String value;

   oper init(uint type):
      type(type),
      value = "" {}

   oper init(String long, String short, String desc, String value, uint type):
      long = long,
      short = short,
      desc = desc,
      type = type,
      value = value {}

   oper init(String long, String short):
      long = long,
      short = short,
      desc = "",
      type = CMD_STR,
      value = "" {}

   // comparison, so we can sort the options
   int cmp(Option other){
      if (!other) return 0;
      return long.cmp(other.long);
   }

   // Setters
   void setInt(int value0){
      value = FStr() `$value0`;
   }

   void setFloat(float value0){
      value = FStr() `$value0`;
   }

   void setBool(bool value0){
      value = FStr() `$value0`;
   }

   void setString(String value0){
      value = value0;
   }

   void set(String value0){
      if (type == CMD_BOOL){
         if (value0 == 't' || value0 == 'true' || value0 == '1')
            value = "1";
         else 
            if (value0 == 'f' || value0 == 'false' || value0 == '0')
               value = "0";
            else
               throw BadCastError(FStr() `Invalid value '$(value0)' for boolean option`);
         return;
      } 
      else if (type == CMD_INT)
         strtoi(value0);
      else if (type == CMD_FLOAT)
         strtof(value0);
      value = value0;
   }
   
   String getRepr(){
      if (value)
         return FStr() `$(short)/$(long)/[$(typeNames[type])]=$(value)`;
      else
         return FStr() `$(short)/$(long)/[$(typeNames[type])]=(null)`;
   }

   void writeTo(Writer out) {
      out.write(getRepr());
   }
}

// Parse info
class ParseInfo {
   String name;
   String value;
   bool nadv;
   
   oper init (String name0, String value0): nadv=false {
      if (name) name = name0;
      if (value) name = value0;
   }
}

// Command line options tree
class CmdOptions {
   Array[Option] options; // Contains option objects
   bool sorted = false;
   StringArray typeNames = ["string", "int", "float", "bool"];

   oper init(): options()
   {  }

   // Forward declaration
   StringArray parse(StringArray args, bool createUnknown);

   
   /// Create a new CmdOptions object filled in with keys/values/types from the 
   /// provided string
   oper init(String createOpts): options() {
      newArgs := split(createOpts);
      parse(newArgs, true);
   }
   
#~    void sort() {
#~       if (!sorted) {
#~          options = options.sort();
#~          cout `CmdOptions.sort()\n`;
#~       }
#~       sorted = true;
#~    }

   void add(Option newoption){
      options.append(newoption);
      sorted = false;
   }

   Option add(String long, String short, String desc, String value, uint type){
      newoption := Option(long, short, desc, value, type);
      add(newoption);
      return newoption;
   }

   // Convenience method to add options based on a specification string
   StringArray addFromString(String line){
      new_argv := split(line);
      return parse(new_argv, true);
   }
   
   // Linear search for now
   uint findLongIndex(String optName){
      result := NOINDEX;
      Option opt;

      for (uint i=0; i<options.count(); i++){
         if (optName == options[i].long) return i;
      }

      return result;
   }

   uint findShortIndex(byte optName){
      result := NOINDEX;

      for (uint i=0; i<options.count(); i++)
         if (!options[i].short.isEmpty() && optName == options[i].short[0])
            return i;

      return result;
   }

   // Generalized get
   Option getOption(String optName, bool throwException){
      index := NOINDEX;
      Option option = null;

      if (optName.size==1)
         index = findShortIndex(optName[0]);
      else
         index = findLongIndex(optName);
      if (index != NOINDEX) return options[index];
      else if (throwException) {
         throw IndexError(FStr() `Option '$optName' not found`);
      }
      return option;
   }
   
   Option getOption(String optName){
      return getOption(optName, true);
   }

   Option getOption(String optName){
      return getOption(optName, true);
   }

   Option oper [](String optName){
      return getOption(optName, true);
   }

   Option oper [](String optName){
      return getOption(optName, true);
   }


   // Getters 
   int getInt(String optName){
      Option opt = getOption(optName);
      if (opt.type != CMD_INT) throw InvalidArgumentError(FStr() `Attempting to fetch non-integer '$optName' option as an integer`);
      return strtoi(opt.value);
   }

   float getFloat(String optName){
      Option opt = getOption(optName);
      if (opt.type != CMD_FLOAT) throw InvalidArgumentError(FStr() `Attempting to fetch non-float option '$optName' as a float`);
      if (!opt.value) return 0.0;
      return strtof(opt.value);

   }

   bool stringAsBool(String value){
      if (value == "1" || value == "t" || value == "true")
         return true;
      else 
         return false;
   }

   bool getBool(String optName){
      Option opt = getOption(optName);
      if (opt.type != CMD_BOOL) throw InvalidArgumentError(FStr() 
         `Attempting to fetch non-bool option '$optName' as a bool`);
      
      return stringAsBool(opt.value);
   }

   String getString(String optName){
      return getOption(optName).value;
   }

   Array[ParseInfo] _getParseInfo(StringArray args, uint argi){
      Array[ParseInfo] parseInfo = {4};
      Option opt;
      arg := args[argi];
      len := arg.size;
      ParseInfo result = null;
      if (len == 1) return parseInfo;
      prefix := arg.slice(0,2);

      if (prefix[0] == b'-' && len > 1) {
         if (len > 2 && prefix[1] == b'-'){ // long option found
            result = ParseInfo(null, null);
            eqi := arg.lfind(b'=', 3);
            if (eqi > 2){ // Found a value after = sign
               result.name = arg.slice(2, eqi);
               result.value = arg.slice(eqi+1);
            }
            else {
               if (arg.size > 9 && arg.substr(2, 7) == "enable-"){
                  result.name = arg.slice(9);
                  result.value = "b/1";
               }
               else if (arg.size > 10 && arg.substr(2, 8) == "disable-"){
                  result.name = arg.slice(10);
                  result.value = "b/0";
               }
               else 
                  result.name = arg.slice(2);
            }

            result.nadv = true;
            parseInfo.append(result);
         }
         else {                            // short option
            bool hasValue;
            for (int i=1; i < len; i++){  // process multiple 
               shortname := arg.substr(i,1);
               hasValue=false;
               opt = getOption(shortname, false);

               if (i==1 || opt){
                  result = ParseInfo(null, null);
                  result.name = shortname;
                  parseInfo.append(result);

                  if (opt && opt.type != CMD_BOOL && len > i+1) { // gobble up the rest of the option
                     result.value = arg.slice(i+1);
                     hasValue = true;
                     if (i==1) result.nadv = true;
                     else result.nadv = false; // set the no advance flag
                     i+=int(result.value.size);
                  }
                  else if (opt && opt.type == CMD_BOOL){
                     result.nadv = true;
                  }
               }
               else if (len > i) { // the case -aARG
                  result.value = arg.slice(i);
                  hasValue = true;
                  result.nadv = true; // set the no advance flag
                  i+=int(result.value.size);
               }
               if (argi < args.count()-1 && args[argi+1] != '-' && !hasValue){
                  result.value = args[argi+1];
               }
            }
         }
      }
      return parseInfo;
   }

   /// Create a new option from a name/value pair
   /// name   : name of the option
   /// value  : string value of the option
   ///          for CMD_BOOL options a null means the option is getting set
   ///          i.e. true

   ///          The value can use a shorthand to define unknown options
   ///          b/value: a boolean with the given value, e.g. b/0, b/true, b/false
   ///                   the values 1, t, and true are all true and
   ///                   0, f, and false are all false
   ///          i/value: integer values
   ///          f/value: float values
   ///          s/value: string value, this is the default if no type specifier
   ///                   is given
   ///          Uppercase type specifiers are also acceptable (B, I, F, S).
   Option _addNewOption(String name, String value){
      if (!name)
         throw InvalidArgumentError(FStr() `Error: trying to create new option with null name`);

      uint newType = 100;
      int startInd = 0;
      Option opt = null;

      // Check for special typed syntax
      if (!value || value.size==0) newType = CMD_BOOL;
      else if (value.size > 2 && value[1] == b'/'){
         if (value[0] == b'B' || value[0] == b'b') newType = CMD_BOOL;
         else if (value[0] == b'I' || value[0] == b'i') newType = CMD_INT;
         else if (value[0] == b'F' || value[0] == b'f') newType = CMD_FLOAT;
         else if (value[0] == b'S' || value[0] == b's') newType = CMD_STR;
         startInd = 2;
      }
      else // Default is a simple string option
         newType = CMD_STR;

      if (newType<100 && name.size>0){
         try {
            if (value)
               opt = Option(name, name.slice(0, 1), "", 
                            value.slice(startInd), 
                            newType
                            );
            else if (newType == CMD_BOOL)
               opt = Option(name, name.slice(0, 1), "", "1", newType);
            else throw InvalidArgumentError(FStr() `While setting new option '$(name):'`);
         } catch (Exception ex){
            String newMsg = FStr() `$(ex.text) invalid new option format '$(value)'`;
            throw InvalidArgumentError(newMsg);
         }
         add(opt);
         return opt;
      }
      else throw Exception(FStr() `Unrecoverable error in creating new option`);
   }
   

   StringArray parse(StringArray args){
      return parse(args, false);
   }

   // Parse the array obtained from sys.argv
   StringArray parse(StringArray args, bool createUnknown){
      StringArray unparsed={args.count()};
      uint argi;
      Option opt;
      bool isnew = false, skipping = false;
      String name, value;
      Array[ParseInfo] parseValues;

      for (argi=0; argi < args.count(); argi++){
         opt = null;
         name = null;
         bool nadv = false;

         //  Skip everything after a --
         if (args[argi] == "--") {
            skipping = true;
            continue;
         }

         if (skipping) {
            unparsed.append(args[argi]);
            continue;
         }

         // create array of parseInfo objects
         parseValues = _getParseInfo(args, argi);

         for (parseInfo :in parseValues){
            name = parseInfo.name;
            value = parseInfo.value;
            nadv = parseInfo.nadv;

            isnew = false;
            if (name) {
               // Look up 
               try {
                  opt = getOption(name);
               } catch (IndexError ix){
                  if (createUnknown) isnew = true;
                  else throw IndexError(ix.text);
               }

               if (opt){
                  if (!value || opt.type == CMD_BOOL){
                     if (opt.type == CMD_BOOL){ // ignore value, we'll parse it next
                        opt.setString("1");
                        continue;
                     }
                     throw InvalidArgumentError(FStr() `Option $(args[argi]) given without a value`);
                  } else {
                     if (isnew) opt = _addNewOption(name, value);
                     else opt.setString(value);
                  }
               }
               else if (isnew){
                  _addNewOption(name, value); // Creates the option and sets the value
               }
            }
         }

         if (!name) {
            unparsed.append(args[argi]);
         }
         else if (value && !nadv) {
            argi++; // Skip next value
         }
      }
      return unparsed;
   }

   void dump(){
      for (uint i = 0; i < options.count(); i++){
         Option opt = options[i];
         if (opt.value)
            cout `$(opt.short)/$(opt.long) [$(typeNames[opt.type])] = $(opt.value)\n`;
         else
            cout `$(opt.short)/$(opt.long) [$(typeNames[opt.type])] = (null)\n`;
      }
   }

   void writeTo(Writer out) {
      out.write('[');
      bool first = true;
      for (elem :in options) {
         if (!first)
            out.write(', ');
         else
            first = false;
         out.write(elem.getRepr());
      }
      out.write(']');
   }

   // Generate a usage string
   String createUsage(String intro){
      StringFormatter fmt = {};
      fmt `$(intro)\n`;
      uint i, maxSpecLen = 0;
      StringArray lineSpecs = {}, lineTexts = {};
      

      for (i = 0; i < options.count(); i++){
         Option opt = options[i];
         String value = opt.value;
         String lineStart = {};
         if (!value)
            value = "null";
         if (opt.type != CMD_BOOL){
            if (opt.short)
               lineStart += FStr()` -$(opt.short) ARG`;
            if (opt.long)
               lineStart += FStr()` --$(opt.long)=ARG`;
            lineTexts.append(FStr() ` $(opt.desc)  ($(typeNames[opt.type]): $(value))\n`);
         }
         else {
            if (opt.short)
               lineStart += FStr()` -$(opt.short)`;
            if (opt.long)
               lineStart += FStr() ` --$(opt.long)`;
            
            lineTexts.append(FStr() ` $(opt.desc)  ($(typeNames[opt.type]): $(stringAsBool(value)))\n`);

         }
         lineSpecs.append(lineStart);
         if (lineStart.size > maxSpecLen) maxSpecLen = lineStart.size;
      }
      
      for (i = 0; i < options.count(); i++){
         fmt `$(ljust(lineSpecs[i], maxSpecLen + 1))`;
         fmt `$(lineTexts[i])`;
      }

      if (i>0) fmt `\n`;

      return fmt.createString();
   }
   
   // Convenience method to print usage string to stdout
   void printUsage(String intro){
      usage := createUsage(intro);
      cout `$(usage)`;
   }
}
