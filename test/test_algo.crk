// test algorithms
// Copyright 2010-2011 Shannon Weyrick <weyrick@mozek.us>

import crack.exp.algorithm QuickSort, InsertionSort;
import crack.cont.array Array;
import crack.io cout;
import crack.runtime rand;

Array[uint] newRandomArray(uint n) {
    a := Array[uint](n);
    for (i := 0; i < n; ++i)
        a.append(rand(0,1000));
    return a;
}

void checkArray(Array[uint] a) {
    uint last=0;
    for (i := 0; i < a.count(); ++i) {
        if (last > a[i])
            cout `fail: $i, $(a[i]) < $last\n`;
        last = a[i];
    }
}

////////////////////////////////

uint nsize = 500;

// QUICKSORT
a := newRandomArray(nsize);
// XXX this syntax will change once some parser issues have been fixed
QuickSort[uint] qs = {a};
checkArray(a);

// INSERTION SORT
c := newRandomArray(nsize);
// XXX this syntax will change once some parser issues have been fixed
InsertionSort[uint] ins = {c};
checkArray(c);

cout `ok\n`;
