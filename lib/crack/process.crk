## This module provides a Process class for managing sub processes
## Copyright 2011 Shannon Weyrick <weyrick@mozek.us>

import crack.runtime close, runChildProcess, waitProcess, signalProcess,
                     SIGKILL, SIGTERM, PipeDesc, free, closeProcess;

import crack.io FDReader, FDWriter, StringFormatter, FStr;
import crack.lang ManagedBuffer, AppendBuffer;
import crack.strutil StringArray, split;
import crack.cont.hashmap HashMap;

// see Process.h in  runtime
int CRK_PROC_STILL_RUNNING = 0x100;
int CRK_PROC_KILLED        = 0x200;
int CRK_PROC_STOPPED       = 0x400;
int CRK_PROC_EXITED        = 0x800;
int CRK_PROC_FAILED        = 0x1000;

int CRK_PIPE_STDIN         = 0x1;
int CRK_PIPE_STDOUT        = 0x2;
int CRK_PIPE_STDERR        = 0x4;

import crack.io cout;

class Process;
FDWriter _makeWriter(Process proc, int fd);

class Process {

    int _pid = -1;
    PipeDesc _pd;
    int _returnCode = CRK_PROC_STILL_RUNNING;

    ## splits on whitespace, quotes are NOT accounted for
    oper init(String cmd): _pd() {
        args := split(cmd);
        array[byteptr] env = null;
        _pid = runChildProcess(args.makePrimArray(), env, _pd);
        if (_pid == -1) {
            _returnCode = CRK_PROC_FAILED;
        }
    }

    oper init(StringArray args): _pd() {
        array[byteptr] env;
        _pid = runChildProcess(args.makePrimArray(), env, _pd);
        if (_pid == -1) {
            _returnCode = CRK_PROC_FAILED;
        }
    }

    oper init(StringArray args, StringArray env): _pd() {
        _pid = runChildProcess(args.makePrimArray(),
                               env.makePrimArray(),
                               _pd);
        if (_pid == -1) {
            _returnCode = CRK_PROC_FAILED;
        }
    }

    oper init(StringArray args, HashMap[String, String] envMap): _pd() {
        StringArray env = {};

        for (item :in envMap){
            env.append(FStr() `$(item.key)=$(item.val)`);
        }

        _pid = runChildProcess(args.makePrimArray(),
                               env.makePrimArray(),
                               _pd);
        if (_pid == -1) {
            _returnCode = CRK_PROC_FAILED;
        }
    }

    oper del() {
        if (!(_pd is null)) {
            closeProcess(_pd);
        free(_pd);
    }
    }

    String _readPipe(int pipe) {
        if (pipe < 0)
            return ""; // XXX null?
        // paged reads        
        buf := ManagedBuffer(1024);
        // extendable buffer used for final string
        wr := AppendBuffer(1024);
        rd := FDReader(pipe);
        uint size;
        while ((size = rd.read(buf)) != 0)
            wr.extend(buf);
        return String(wr, true); // takes ownership of appendbuffer
    }

    String getStdOut() { 
        if (_returnCode != CRK_PROC_FAILED)
            return _readPipe(_pd.stdout);
        else
            return "";
    }
    
    String getStdErr() { 
        if (_returnCode != CRK_PROC_FAILED)        
            return _readPipe(_pd.stderr);
        else
            return "";
    }

    ## Returns a writer to the process that writes to standard input.
    FDWriter writer() {
        return _makeWriter(this, _pd.stdin);
    }

    int getPid() { return _pid; }

    int getReturnCode() { return _returnCode & 0xff; }

    int poll() {
        if (_returnCode & CRK_PROC_STILL_RUNNING)
            _returnCode = waitProcess(_pid, 1);
        return getReturnCode();
    }

    int wait() {
        if (_returnCode & CRK_PROC_STILL_RUNNING)
            _returnCode = waitProcess(_pid, 0);
        return getReturnCode();
    }
    
    void _maybePoll() {
        if (_returnCode & CRK_PROC_KILLED ||
            _returnCode & CRK_PROC_STOPPED ||
            _returnCode & CRK_PROC_EXITED ||
            _returnCode == CRK_PROC_FAILED
            )
            return;
        poll();
    }

    bool failed() {
        _maybePoll();
        return (_returnCode == CRK_PROC_FAILED);
    }

    bool killed() {
        _maybePoll();
        return (_returnCode & CRK_PROC_KILLED);
    }

    bool stopped() {
        _maybePoll();
        return (_returnCode & CRK_PROC_STOPPED);
    }

    bool isRunning() {
        _maybePoll();
        return (_returnCode & CRK_PROC_STILL_RUNNING);
    }

    void putStdIn(String data) {
        if (isRunning() && _pd.stdin) {
            rd := FDWriter(_pd.stdin);
            rd.write(data);
        }
    }

    void sendSignal(int sig) {
        if (_returnCode & CRK_PROC_STILL_RUNNING)
            signalProcess(_pid, sig);
    }

    void terminate() {
        // XXX this needs to be a runtime call, as on Windows it will do
        // something different
        if (_returnCode & CRK_PROC_STILL_RUNNING)
            signalProcess(_pid, SIGTERM);
    }

    void kill() {
        // XXX this needs to be a runtime call, as on Windows it will do
        // something different
        if (_returnCode & CRK_PROC_STILL_RUNNING)
            signalProcess(_pid, SIGKILL);
    }

    // close the pipes. read/write operations on this class after a call to
    // close are undefined
    void close() {
        closeProcess(_pd);
        free(_pd);
        _pd = null;
    }

}

class _ProcWriter : FDWriter {
    Process __process;
    oper init(Process process, int fd) : FDWriter(fd), __process = process {}
}

FDWriter _makeWriter(Process proc, int fd) { return _ProcWriter(proc, fd); }
