# Copyright 2010 Google Inc.

import crack.lang die, ManagedBuffer, SubString, CString, substr, slice;
import crack.io cout;

if ('test' >= 'test string')
    die('test >= test string');

if ('bad magic' <= 'bad')
    die('bad magic <= bad');

if ('foo' != 'foo')
    die('foo != foo');

buf := ManagedBuffer(10);
buf.move(0, '1234567890');
s := String(buf, true);
if (s.size != 10)
    die('sizeof string created from ManagedBuffer is wrong');
if (s != '1234567890')
    die("didn't copy from a ManagedBuffer correctly");

s = String('test of copied substrings', 8, 6);
if (s != 'copied')
    die("didn't copy substring correctly.");

s = SubString('test of referenced substring', 8, 10);
if (s != 'referenced')
    die('failed to create substring reference.');

s = substr('this is foo', 5, 2);
if (s != 'is')
    die('normal substr() failed');

s = substr('this is foo', 5);
if (s != 'is foo')
    die('substr() to end failed');

if (slice('this is foo', 5, 7) != 'is')
    die('normal slice() failed');

if (slice('this is foo', -6, -4) != 'is')
    die('slice() with negative offsets failed');

if (slice('this is foo', -6) != 'is foo')
    die('slice() to end failed');

# same tests using the corresponding methods

if ('this is foo'.substr(5, 2)  != 'is' ||
    'this is foo'.substr(5) != 'is foo' ||
    'this is foo'.slice(5, 7) != 'is' ||
    'this is foo'.slice(-6) != 'is foo')
    die('one of the substr/slice methods failed');

# exercise the overrides in SubString
ss := 'this is fox'.slice(-3);
if (ss.substr(1, 1) != 'o' ||
    ss.substr(1) != 'ox' ||
    ss.slice(1, -1) != 'o' ||
    ss.slice(-2) != 'ox')
    die('one of the SubString substr/slice overrides failed');

cs := CString("test 123");
if (cs.size != 8)
    die('failed to create c string');
if (cs.buffer[cs.size] != 0)
    die('failed to null terminate');

// string methods
s = String("one.two.three");
if (s.rfind("."[0]) != 7)
    die('rfind failed');
if (s.rfind("@"[0]) != -1)
    die('rfind nofind failed');
if (s.lfind("."[0]) != 3)
    die('lfind failed');
if (s.lfind("@"[0]) != -1)
    die('lfind nofind failed');

s = 'test\'\0\223';
if (s.getRepr() != "'test\\043\\000\\223'")
    cout `bad value for s.getRepr(): $(s.getRepr())\n`;

cout `ok\n`;