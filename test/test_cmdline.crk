// Test CmdOptions

import crack.io cout, FStr;
import crack.exp.cmdline CmdOptions, Option, CMD_STR, CMD_INT, CMD_FLT, CMD_BLN, splitString;
import crack.lang Exception;
import crack.sys argv;

String S = null;

// Test full constructor
Option help = {"help", "h", "Show help message", "f", CMD_BLN};

// Test constructor with default empty value
Option example = {"help", "h"};

array[Option] optArray = [ help, example ];
CmdOptions testOptions = CmdOptions();
for (uint i = 0; i < 2; i++)
   testOptions.add(optArray[i]);



CmdOptions options = {};

options.add("help", "h", "Show help message", "f", CMD_BLN);
options.add("string", "s", "An example string", "astring", CMD_STR);
options.add("float", "f", "A floating point number", "100.0", CMD_FLT);
options.add("int", "i", "Integer example", "10", CMD_INT);
options.add("bool", "b", "Boolean example", "f", CMD_BLN);

// Test the values of the options
if (options.getInt("int") != 10 || options.getInt("i") != 10)
   cout `Integer retrieve failed\n`;

if (options.getFloat("float") != 100.0 || options.getFloat("f") != 100.0)
   cout `Float retrieve failed\n`;

if (options.getString("string") != "astring" || options.getString("s") != "astring")
   cout `String retrieve failed\n`;

if (options.getBool("bool") || options.getBool("b"))
   cout `Bool retrieve failed\n`;

#~ options.dump();
#~ options.printUsage(FStr() `Usage: $(argv[0]) [OPT1] [OPT2] file\n`);


// this causes a segfault in AOT compiled code
#~ try{
#~    int o = options.getInt("o");
#~    cout `Fetching non-existent key did not throw exception\n`;
#~ } 
#~ catch (Exception ex){
#~ }

options = CmdOptions();
test_argv := splitString("--help=b/false --bool -int i/1 --j=i/2 --s2=str2 -f f/1.0 --gloat2=f/2.0", b' ');

// Parse command line array
options.parse(test_argv, true);
#~ options.dump();


if (options.getInt("int") != 1 || options.getInt("i") != 1)
   cout `Integer retrieve failed\n`;

if (options.getInt("j") != 2)
   cout `Integer retrieve 2 failed\n`;

if (options.getFloat("f") != 1.0)
   cout `Float retrieve failed\n`;

if (options.getFloat("gloat2") != 2.0 || options.getFloat("g") != 2.0)
   cout `Float retrieve failed\n`;

if (options.getString("s2") != "str2" || options.getString("s") != "str2")
   cout `String retrieve failed\n`;

if (!options.getBool("bool") || !options.getBool("b"))
   cout `Bool retrieve 2 failed\n`;

if (options.getBool("help") || options.getBool("h"))
   cout `Bool retrieve 3 failed\n`;

cout `ok\n`;
