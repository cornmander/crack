// test algorithms
// Copyright 2010-2011 Shannon Weyrick <weyrick@mozek.us>

import crack.exp.algorithm QuickSort, InsertionSort;
import crack.cont.array Array;
import crack.io cout, FStr;
import crack.runtime rand;

Array[uint] newRandomArray(uint n) {
    a := Array[uint](n);
    for (i := 0; i < n; ++i)
        a.append(rand(0,1000));
    return a;
}

void checkArray(Array[uint] a) {
    uint last=0;
    for (i := 0; i < a.count(); ++i) {
        if (last > a[i])
            cout `fail: $i, $(a[i]) < $last\n`;
        last = a[i];
    }
}

void checkArray(array[uint] a, uintz count) {
    uint last=0;
    for (i := 0; i < count; ++i) {
        if (last > a[i])
            cout `fail: $i, $(a[i]) < $last\n`;
        last = a[i];
    }
}


////////////////////////////////

uint nsize = 500;

// QUICKSORT
a := newRandomArray(nsize);
// XXX this syntax will change once some parser issues have been fixed
QuickSort[Array[uint]] qs = {a, a.count()};
checkArray(a);

// INSERTION SORT
c := newRandomArray(nsize);
// XXX this syntax will change once some parser issues have been fixed
InsertionSort[Array[uint]] ins = {c, c.count()};
checkArray(c);

// In place sort
b := newRandomArray(nsize);
b.sort();
checkArray(b);

sA := Array[String]!['some', 'string', 'on', 'crack'];
sA.sort();
FStr sWriter = {};
stringRepr := FStr() `$sA`;
if (stringRepr != '[crack, on, some, string]')
   cout `String Array sort/writeTo method failed\n`;





// This causes a segfault
#~ sA2 := array[String]!['some', 'string', 'on', 'crack'];
#~ 
#~ InsertionSort[array[String]] qs2 = {mS, 2};

sI2 := array[uint]![3,2,1,0];

QuickSort[array[uint]] qs2 = {sI2, 4};
checkArray(sI2, 4);

cout `ok\n`;
