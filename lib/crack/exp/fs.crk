## Copyright 2011 Google Inc.
## Crack Virtual Filesystem

import crack.runtime basename, errno, fileExists, free, fileRemove, 
    getDirEntry, mkdir, open, opendir, readdir, Stat, stat, Dir, DirEntry, 
    O_CREAT, O_RDONLY, O_WRONLY, S_IFDIR;
import crack.exp.error strerror;
import crack.io cout, FDReader, FDWriter, FStr, Reader, Writer;
import crack.lang Buffer, CString, Exception, InvalidArgumentError, 
    InvalidStateError;
import crack.exp.readers FullReader;

## This gets raised when referencing a path that doesn't exist.
class NoEntryError : Exception {
    oper init(String text) : Exception(text) {}
}

## This gets raise when the process doesn't have the authority to perform the 
## request operation.
class AccessDeniedError : Exception {   
    oper init(String text) : Exception(text) {}
}

## This gets thrown when there was an operating system error that doesn't 
## cleanly map to a Crack exception.  Try to reserve throwing this for that 
## case, because processing this error will be platform dependent.
class SystemError : Exception {
    int __errno;
    
    oper init(String context, int _errno) : 
        Exception(FStr() `$context: $(strerror())`),
        __errno = _errno {
    }
}

class Path;

## Iterates over a sequence of Path objects.
@abstract class PathIter {
    PathIter iter() { return this; }
    
    @abstract Path elem();
    @abstract bool next();
}

## A path is a node in a virtual filesystem.  It can correspond to a 
## directory, a file, or the root of the filesystem.
@abstract class Path {

    ## Returns a reader for the path.  The path must be readable.
    @abstract Reader reader();
    
    ## Returns a writer for the path.  The path must be writable.
    @abstract Writer writer();
    
    ## Make a directory corresponding to the path.
    @abstract void makeDir();
    
    FullReader makeFullReader() { 
        return FullReader(reader());
    }
    
    String readAll() {
        src := FullReader(reader());
        return src.readAll();
    }
    
    ## write the entire contents of the file.
    void writeAll(Buffer data) {
        writer().write(data);
    }

    @abstract Path oper [](String child);

    @abstract Path _createNode(String path);

    @abstract Path oper /(String other);
    
    ## Returns true if the object exists, false if not.
    @abstract bool exists();
    
    ## Returns true if the path is a directory (that is, if "children()" can
    ## be used for iteration)
    @abstract bool isDir();
   
    ## Deletes the object at the path.
    @abstract void delete();

    ## Returns the short (unqualified) name of the Path.  This is the name 
    ## relative to its container.
    @abstract String getName();

    ## Returns the fully qualified name of the Path.
    @abstract String getFullName();
    
    ## Returns the size of the object.
    @abstract uint64 getSize();
    
    ## Returns an interator over the children of the path.  (Children may not 
    ## be assumed to be in any particular order)
    @abstract PathIter children();
}

class RealPathIter : PathIter {
    Path __container;
    Dir __dir;
    DirEntry __entry;

    bool _readNext() {
        if (!__dir)
            throw InvalidStateError('Iterating past the end of the directory');

        if (!readdir(__dir)) {
            __dir = null;
            return false;
        } else {
            return true;
        }
    }
    
    oper init(Path container) : __container = container,
        __dir = opendir(CString(container.getFullName()).buffer),
        __entry = getDirEntry(__dir) {

        next();        
    }

    Path elem() { return __container[StaticString(__entry.name)]; }

    ## Returns true if 'name' is '.' or '..'
    @static bool __isSpecial(byteptr name) {
        return name[0] == b'.' && 
               (name[1] == 0 || name[1] == b'.' && name[2] == 0);
    }
    
    bool next() {
        while (true) {
            if (!_readNext()) {
                __dir = null;
                return false;
            } else if (__isSpecial(__entry.name)) {
                continue;
            } else {
                return true;
            }
        }
        return false;
    }
    
    bool isTrue() { return __dir; }
    
}

## A real filesystem path.
class RealPath : Path {

    CString __path;

    oper init(String realPath) : __path = CString(realPath) {}
    oper init(CString realPath) : __path = realPath {}

    void writeTo(Writer out) {
        out.write(__path);
    }

    Path oper [](String child) {
        if (child == '..' || child == '.')
            throw InvalidArgumentError(
                'Parent directory access not supported'
            );
        return RealPath(__path + '/' + child);
    }

    Path _createNode(String path) {
        return this[path];
    }
    
    Path oper /(String other) {
        return this[other];
    }

    bool exists() {
        return fileExists(__path.buffer);
    }

    bool isDir() {
        Stat st = {};
        rc := stat(__path.buffer, st);
        result := rc && st.st_mode & S_IFDIR;
        free(st);
        return result;
    }

    Reader reader() {
        fd := open(__path.buffer, O_RDONLY, 0);
        if (fd == -1)
            throw SystemError('Opening ' + __path, errno());
        return FDReader(fd);
    }
    
    Writer writer() {
        fd := open(__path.buffer, O_CREAT | O_WRONLY, 0777);
        if (fd == -1)
            throw SystemError(FStr() `opening $__path: $(strerror())`, 
                              errno()
                              );
        return FDWriter(fd);
    }

    void makeDir() {
        mkdir(__path.buffer, 0o777);
    }

    void delete() {
        if (fileRemove(__path.buffer))
            throw SystemError(FStr() `Removing $__path: $(strerror())`, 
                              errno()
                              );
    }
    
    
    PathIter children() { return RealPathIter(this); }
    String getFullName() { return __path; }
    String getName() { return String(basename(__path.buffer)); }
    uint64 getSize() {
        Stat st = {};
        rc := stat(__path.buffer, st);
        result := uint64(st.st_size);
        free(st);
        if (rc)
            throw SystemError(FStr() `stating $__path: $(strerror())`,
                              errno()
                              );
        return result;
    }
        
}
