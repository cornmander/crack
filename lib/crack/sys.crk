## This module provides access to system internals.
## Copyright 2010 Google Inc.

import crack.exp.error err;
import "libc.so.6" exit, free;

void free(voidptr p);

## The standard library exit() function - call it with the exit code to be 
## returned from the program.
void exit(int status);

class StringArray {
    
    array[String] __rep = null;
    uint __count;
    array[byteptr] __primArray = null;
    
    oper init(uint count) : 
        __rep = array[String](count),
        __count = count {
    }

    void oper []=(uint i, String val) {
        if (i >= __count) {
            err.do() `Array index $i out of bounds`;
            return;
        }

        # bind the new value, release the existing one
        val.oper bind();
        __rep[i].oper release();
        __rep[i] = val;
    }
    
    String oper [](uint i) {
        if (i >= __count) {
            err.do() `Array index $i out of bounds`;
            return null;
        }

        result := __rep[i];
        return __rep[i];
    }
    
    oper del() {
        # release all of the elements
        uint i;
        while (i < __count) {
            __rep[i].oper release();
            i = i + 1;
        }
        free(__rep);
        if (!(__primArray is null)) free(__primArray);
    }

    ## Returns the number of elements in the array.    
    uint count() {
        return __count;
    }
    
    ## Returns the primitive array (useful for communicating to C bindings)
    array[byteptr] getPrimArray() {
        if (__primArray is null) {
            __primArray = array[byteptr](__count);
            uint i;
            while (i < __count) {
                __primArray[i] = __rep[i].buffer;
                ++i;
            }
        }
        return __primArray;
    }
}

StringArray _createArgv() {
    v := __getArgv();
    c := __getArgc();
    argv := StringArray(uint(c));
    uint i;
    while (i < c) {
        argv[i] = StaticString(v[i]);
        i = i + 1;
    }
    return argv;
}

## The "argv" variable.
argv := _createArgv();
