// test algorithms
// Copyright 2010 Shannon Weyrick <weyrick@mozek.us>

import crack.exp.algorithm quickSort, insertionSort;
import crack.container Array;
import crack.io cout;
import crack.runtime rand;

// a place to put random integers
class Int {
    uint val;
    oper init(uint val) : val = val {}
    int cmp(Object other) {
        if (other.class is Int) {
            uint ov = Int.unsafeCast(other).val;
            if (val > ov) 
                return 1;
            else if (val < ov)
                return -1;
            else
                return 0;
        }
        else {
            return -1;
        }
    }
}

Array newRandomArray(uint n) {
    a := Array(n);
    uint i = 0;
    Int rint;
    while (i < n) {
        rint = Int(rand(0,1000));
        a.append(rint);
        i++;
    }
    return a;
}

void checkArray(Array a) {
    uint i = 0, last=0;
    while (i < a.count()) {
        rint := Int.cast(a[i]);
        if (last > rint.val)
            cout `fail: $i, $(rint.val) < $last\n`;
        last = rint.val;
        i++;
    }
}

////////////////////////////////

uint nsize = 500;

// QUICKSORT
a := newRandomArray(nsize);
quickSort(a);
checkArray(a);

// INSERTION SORT
c := newRandomArray(nsize);
insertionSort(c);
checkArray(c);

cout `ok\n`;
