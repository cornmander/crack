// Algorithms
// Copyright 2010-2011 Shannon Weyrick <weyrick@mozek.us>

## Base class version of quick-sort, can be applied to primitive arrays.
class QuickSortPrim[Elem] {

    @static
    void _swap(Elem A, uintz l, uintz r){
        temp := A[l];
        A[l] = A[r];
        A[r] = temp;
    }

    @static
    void _quickSort3(Elem A, uintz l, uintz r) {
        
        // this is based on a 3-partition version from a talk by Robert Sedgewick
        // and Jon Bentley
        // http://www.cs.princeton.edu/~rs/talks/QuicksortIsOptimal.pdf
        uintz i = l-1;
        uintz j = r;
        uintz p = l-1;
        uintz q = r; 

        if (r <= l)
            return;
        v := A[r];

        while (true) {
            while (A[++i] < v);
            while (v < A[--j]) 
                if (j == l) 
                    break;
            if (i >= j) 
                break;
            _swap(A, i,j);
            if (A[i] == v) { 
                p++; 
                _swap(A, p, i);
            }
            if (v == A[j]) { 
                q--; 
                _swap(A, j, q);
            }
        }

        _swap(A, i, r);
        j = i-1; 
        i = i+1;

        for (k := l; k < p; k++) {
            _swap(A, k, j);
            j--;
        }

        for (k := r-1; k > q; k--) {
            _swap(A, i, k);
            i++;
        }

        _quickSort3(A, l, j);
        _quickSort3(A, i, r);
    }

    @static
    void sort(Elem A, uintz count){
        _quickSort3(A, 0, count - 1);
    }

}

## Quick-sort.  SeqT must have [], []= and count()
class QuickSort[SeqT] : QuickSortPrim[SeqT] {
    @static
    void sort(SeqT A){
        _quickSort3(A, 0, A.count() - 1);
    }
}

## Insertion sort primitive.  Can be used on primitive arrays.
class InsertionSortPrim[Elem] {

    @static
    void _swap(Elem A, uintz l, uintz r){
        temp := A[l];
        A[l] = A[r];
        A[r] = temp;
    }


    @static
    void _insertionSort(Elem A, uintz count) {
        uintz j = 1;
        uintz i;
        while (j < count) {
            key := A[j];
            i = j-1;
            while (i >= 0 && A[i] > key) {
                _swap(A, i+1, i);
                i--;
            }
            A[i+1] = key;
            j++;
        }
    }

    @static
    void sort(Elem A, uintz count){
        _insertionSort(A, count);
    }
}

## Insertion sort.  Requires [], []= and count().
## Usage: typeof(seq).sort(seq);
class InsertionSort[SeqT] : InsertionSortPrim[SeqT] {
    @static void sort(SeqT A) {
        _insertionSort(A, A.count());
    }
}


## Heap routines
class HeapPrim[Elem] {

    @static
    void _swap(Elem A, uintz l, uintz r){
        --l; --r;
        temp := A[l];
        A[l] = A[r];
        A[r] = temp;
    }

    @static
    bool isMaxHeap(Elem A, uintz count) {
        // for i:=1..count, assert A[Parent(i)] >= A[i]
        for (i := count; i > 1; --i) {
            parent := i >> 1;
            if (A[parent-1] < A[i-1]) {
                return false;
            }
        }
        return true;
    }

    ## index i is 1 based, not 0 based
    @static
    void maxHeapify(Elem A, uintz i, uintz count) {
        uintz l = i << 1;
        uintz r = l+1;
        uintz largest;
        if (l <= count && A[l-1] > A[i-1])
            largest = l;
        else
            largest = i;
        if (r <= count && A[r-1] > A[largest-1])
            largest = r;
        if (largest != i) {
            _swap(A, i, largest);
            maxHeapify(A, largest, count);
        }
    }

    @static
    void buildMaxHeap(Elem A, uintz count) {
        for (i := count >> 1; i > 0; --i) {
            maxHeapify(A, i, count);
        }
    }

}

## Heaps.  Requires [], []= and count().
class Heap[SeqT] : HeapPrim[SeqT] {
    @static
    void buildMaxHeap(SeqT A) {
        buildMaxHeap(A, A.count());
    }
    @static
    bool isMaxHeap(SeqT A) {
        return isMaxHeap(A, A.count());
    }
}

class HeapSortPrim[Elem] : HeapPrim[Elem] {
    @static
    void _heapSort(Elem A, uintz count) {
        heapSize := count;
        for (i := count; i > 1; --i) {
            _swap(A, 1, i);
            heapSize--;
            maxHeapify(A, 1, heapSize);
        }
    }
    @static
    void sort(Elem A, uintz count) {
        if (!isMaxHeap(A, count))
            buildMaxHeap(A, count);
        _heapSort(A, count);
    }
}

class HeapSort[SeqT] : HeapSortPrim[SeqT] {
    @static
    void sort(SeqT A) {
        _heapSort(A, A.count());
    }
}
