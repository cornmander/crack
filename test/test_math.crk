// Copyright (C) 2010 Conrad D. Steenberg
// Lincensed under LGPLv3

// test of math library
@import crack.ann define;
import crack.lang Formatter;
import crack.io cout, StringFormatter;
import crack.exp.file File;

// import all the symbols in the module
import crack.math  sin, cos, tan, asin, acos, atan, sinh, cosh, tanh, asinh,
                    acosh, atanh, atoi, atof, strtof, usecs, exp, exp2,
                    ilogb, log, log10, log1p, log2, cbrt, abs, hypot,  sqrt,
                    erf, erfc, lgamma, tgamma, ceil, floor, nearbyint, rint,
                    round, trunc, fpclassify, isfinite, isinf, isnan,
                    isnormal, sign, fmod, remainder, copysign, nextafter,
                    fdim, pow, testexcept, clearexcept, errno, setErrno, 
                    max, min, rand, srand,
                    HUGE_VAL, INFINITY, NAN, FP_INFINITE, FP_NAN,
                    FP_NORMAL, FP_SUBNORMAL, FP_ZERO, FP_ILOGB0, FP_ILOGBNAN,
                    ALL_EXCEPT, INVALID, DIVBYZERO, OVERFLOW,
                    UNDERFLOW, ERANGE,  
                    E, LOG2E, LOG10E, LN2, LN10, LNPI, PI, PI_2, PI_4, PI1, 
                    PI2, SQRTPI2, SQRT2, SQRT3, SQRT1_2, SQRTPI, GAMMA;
                    

fmt := StringFormatter();

@define createOutputValues3(name, func1, func2, func3){
   void name(float32 input_float_32, float64 input_float_64, float input_float, Formatter out, uint i){
      f1:=$func1;
      f2:=$func2;
      f3:=$func3;
      out `f32[$i] = \t$(input_float_32): \t $f1 = $(func1(input_float_32)) \t $f2 = $(func2(input_float_32)) \t $f3 = $(func3(input_float_32))\n`;
      out `f64[$i] = \t$(input_float_64): \t $f1 = $(func1(input_float_64)) \t $f2 = $(func2(input_float_64)) \t $f3 = $(func3(input_float_64))\n`;
      out `fsys[$i] = \t$(input_float): \t $f1 = $(func1(input_float)) \t $f2 = $(func2(input_float)) \t $f3 = $(func3(input_float))\n`;
   }
}

// instantiate test functions
@createOutputValues3(SinCosTan, sin, cos, tan)
@createOutputValues3(aSinaCosaTan, asin, acos, atan)
@createOutputValues3(SinhCoshTanh, sinh, cosh, tanh)
@createOutputValues3(aSinhaCoshaTanh, asinh, acosh, atanh)


// Input arrays
trig_inputs_float_32:=array[float32](41);
trig_inputs_float_64:=array[float64](41);
trig_inputs_float:=array[float](41);

// Populate the arrays
float32 val32=-2.0*float32(PI);
float32 delta32=0.1*float32(PI);
float64 val64=-2.0*PI;
float64 delta64=0.1*PI;
float val=-2.0*PI;
float delta=0.1*PI;

uint i=0;
uint intervals=40;

while (i<=intervals){
  val=float(i)*delta;
  trig_inputs_float[i]=val+float(i)*delta;
  trig_inputs_float_32[i]=val32+float32(i)*delta32;
  trig_inputs_float_64[i]=val64+float32(i)*delta64;
  i++;
}

// Call Trig functions
i=0;
while (i<=intervals){
   SinCosTan(trig_inputs_float_32[i], trig_inputs_float_64[i], trig_inputs_float[i], fmt, i);
   aSinaCosaTan(trig_inputs_float_32[i], trig_inputs_float_64[i], trig_inputs_float[i], fmt, i);
   SinhCoshTanh(trig_inputs_float_32[i], trig_inputs_float_64[i], trig_inputs_float[i], fmt, i);
   aSinhaCoshaTanh(trig_inputs_float_32[i], trig_inputs_float_64[i], trig_inputs_float[i], fmt, i);
  i++;
}

resultString:=fmt.string();

// Random numbers
srand(10);
int r;
for(i=0; i<10; i++) r=rand();

cout `ok\n`;
