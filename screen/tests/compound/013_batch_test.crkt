%%TEST%%
Batch of persistence tests.
%%ARGS%%
%%FILE%%
import systest test;
test.preBootstrap = true;

# Test of alias persistence.
test.mod('mod', I"
    class A {
        void f() { puts('alias'); }
        alias g = f;
    }
    ");
test.main(I"
    import mod A;
    A().g();
    ");
test.run();

test.main(I"
    import mod A;
    A().g(); # force recompile
    ");
test.run();

# Test of inheritance from a slave module.
test.main(I"
    @abstract class A[T] : VTableBase {
        @abstract T f();
    }
    class B : A[int] {
        int f() { return 100; }
    }
    A[int] a = B();
    if (a.f() != 100)
        puts('FAILED specialization of abstract');
    puts('ok');
    ");
test.run();
test.run();

# Test of nested classes in a slave module.
test.main(I"
    class A[T] {
        class B {}
        B f() { return null; }
    }
    class B : A[int] {}
    puts('nested classes');
    ");
test.run();
test.run();

# Test of abstract generics.
test.mod('mod', I"
    @abstract class A[T] : VTableBase {
        @abstract void f();
    }
    ");
test.main(I"
    import mod A;
    class B : A[int] { void f() {} }
    puts('abstract generics');
    ");
test.run();
test.rmCacheFiles('mod.A');
test.run();

# Test that "cast()" is correctly reconstituted.
test.mod('mod', 'class A : VTableBase {}');
test.main("import mod A; A.cast(A()); puts('cast reconstituted')");
test.run();
test.rmCacheFiles('.main.*');
test.run();

# importing a generic instantiated in a slave.
test.mod('mod', I"
    class A[T] { void f() { puts(T.name); } }
    class GenericInASlave {}
    A[GenericInASlave] ab = {};
    ");
test.main(I"
    import mod ab;
    ab.f();
    ");
test.run();
test.run();

%%REXPECT%%
out: alias
terminated: success
out: alias
terminated: success
out: ok
terminated: success
out: ok
terminated: success
out: nested classes
terminated: success
out: nested classes
terminated: success
out: abstract generics
terminated: success
out: abstract generics
terminated: success
out: cast reconstituted
terminated: success
out: cast reconstituted
terminated: success
out: GenericInASlave
terminated: success
out: GenericInASlave
terminated: success
%%STDIN%%
