// Expose rand/srand random/srandom functions in libc
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

import crack.cont.array Array;
import crack.hash.murmur3 Murmur3_32;
import crack.io cout;
import crack.lang ManagedBuffer, AppendBuffer, Buffer, InvalidArgumentError;
import crack.runtime random, srandom, setstate, initstate;
import crack.time Time;
@export_symbols random, srandom, setstate, initstate;

/// Return a byffer with the length specified that has a very high probablility
/// of being unique due to it's use of a high-resolution time values combined
/// with system random numbers.
AppendBuffer uuid(uint numbytes) {
    buf := ManagedBuffer(16);
    buf.size = 16;
    pages := numbytes + numbytes%4;
    result := AppendBuffer(pages);
    result.size = numbytes;
    pages /= 4;

    t := Time.now();
    h := Murmur3_32();
    sourceInts := array[int32](buf.buffer);
    hashInts := array[uint32](result.buffer);

    srandom(uint(t.nsecs));
    
    for (uint i = 0; i < pages; i++) {
        t.setToNow(null);
        sourceInts[0] = t.nsecs;
        sourceInts[1] = t.secs;
        sourceInts[2] = int32(random());
        sourceInts[3] = int32(random());

        h.update(buf);
        hashInts[i] = h.asUInt32();
    }
    return result;
}
