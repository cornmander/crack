# Crack Cairo binding of cairo.h
# Adapted from SDL binding

@import opt.extgen generateExtension;

@generateExtension crack.ext._cairo {
   @filename 'opt/_cairo.cc'
   @inject '#include <cairo.h>\n'

   // Status constants
   const uint32 
      CAIRO_STATUS_SUCCESS,
      CAIRO_STATUS_NO_MEMORY,
      CAIRO_STATUS_INVALID_RESTORE,
      CAIRO_STATUS_INVALID_POP_GROUP,
      CAIRO_STATUS_NO_CURRENT_POINT,
      CAIRO_STATUS_INVALID_MATRIX,
      CAIRO_STATUS_INVALID_STATUS,
      CAIRO_STATUS_NULL_POINTER,
      CAIRO_STATUS_INVALID_STRING,
      CAIRO_STATUS_INVALID_PATH_DATA,
      CAIRO_STATUS_READ_ERROR,
      CAIRO_STATUS_WRITE_ERROR,
      CAIRO_STATUS_SURFACE_FINISHED,
      CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
      CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
      CAIRO_STATUS_INVALID_CONTENT,
      CAIRO_STATUS_INVALID_FORMAT,
      CAIRO_STATUS_INVALID_VISUAL,
      CAIRO_STATUS_FILE_NOT_FOUND,
      CAIRO_STATUS_INVALID_DASH,
      CAIRO_STATUS_INVALID_DSC_COMMENT,
      CAIRO_STATUS_INVALID_INDEX,
      CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
      CAIRO_STATUS_TEMP_FILE_ERROR,
      CAIRO_STATUS_INVALID_STRIDE,
      CAIRO_STATUS_FONT_TYPE_MISMATCH,
      CAIRO_STATUS_USER_FONT_IMMUTABLE,
      CAIRO_STATUS_USER_FONT_ERROR,
      CAIRO_STATUS_NEGATIVE_COUNT,
      CAIRO_STATUS_INVALID_CLUSTERS,
      CAIRO_STATUS_INVALID_SLANT,
      CAIRO_STATUS_INVALID_WEIGHT,
      CAIRO_STATUS_INVALID_SIZE,
      CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
      CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
      CAIRO_STATUS_DEVICE_ERROR,
      CAIRO_STATUS_LAST_STATUS;

   // Content constants
   const uint32
      CAIRO_CONTENT_COLOR,
      CAIRO_CONTENT_ALPHA,
      CAIRO_CONTENT_COLOR_ALPHA;

   // Operator constants
   const uint32
      CAIRO_OPERATOR_CLEAR,

      CAIRO_OPERATOR_SOURCE,
      CAIRO_OPERATOR_OVER,
      CAIRO_OPERATOR_IN,
      CAIRO_OPERATOR_OUT,
      CAIRO_OPERATOR_ATOP,

      CAIRO_OPERATOR_DEST,
      CAIRO_OPERATOR_DEST_OVER,
      CAIRO_OPERATOR_DEST_IN,
      CAIRO_OPERATOR_DEST_OUT,
      CAIRO_OPERATOR_DEST_ATOP,

      CAIRO_OPERATOR_XOR,
      CAIRO_OPERATOR_ADD,
      CAIRO_OPERATOR_SATURATE,

      CAIRO_OPERATOR_MULTIPLY,
      CAIRO_OPERATOR_SCREEN,
      CAIRO_OPERATOR_OVERLAY,
      CAIRO_OPERATOR_DARKEN,
      CAIRO_OPERATOR_LIGHTEN,
      CAIRO_OPERATOR_COLOR_DODGE,
      CAIRO_OPERATOR_COLOR_BURN,
      CAIRO_OPERATOR_HARD_LIGHT,
      CAIRO_OPERATOR_SOFT_LIGHT,
      CAIRO_OPERATOR_DIFFERENCE,
      CAIRO_OPERATOR_EXCLUSION,
      CAIRO_OPERATOR_HSL_HUE,
      CAIRO_OPERATOR_HSL_SATURATION,
      CAIRO_OPERATOR_HSL_COLOR,
      CAIRO_OPERATOR_HSL_LUMINOSITY;

   // Anti-alias constants
   const uint32
      CAIRO_ANTIALIAS_DEFAULT,
      CAIRO_ANTIALIAS_NONE,
      CAIRO_ANTIALIAS_GRAY,
      CAIRO_ANTIALIAS_SUBPIXEL;

   // Winding rule constants
   const uint32
      CAIRO_FILL_RULE_WINDING,
      CAIRO_FILL_RULE_EVEN_ODD;

   // Line cap constants
   const uint32
      CAIRO_LINE_CAP_BUTT,
      CAIRO_LINE_CAP_ROUND,
      CAIRO_LINE_CAP_SQUARE;

   // Line join constants
   const uint32
      CAIRO_LINE_JOIN_MITER,
      CAIRO_LINE_JOIN_ROUND,
      CAIRO_LINE_JOIN_BEVEL;

   // Text cluster direction
   const uint32
      CAIRO_TEXT_CLUSTER_FLAG_BACKWARD;

   // Font slant constants
   const uint32
      CAIRO_FONT_SLANT_NORMAL,
      CAIRO_FONT_SLANT_ITALIC,
      CAIRO_FONT_SLANT_OBLIQUE;

   // Font weight constants
   const uint32
      CAIRO_FONT_WEIGHT_NORMAL,
      CAIRO_FONT_WEIGHT_BOLD;

   // Subpixel order constants
   const uint32
      CAIRO_SUBPIXEL_ORDER_DEFAULT,
      CAIRO_SUBPIXEL_ORDER_RGB,
      CAIRO_SUBPIXEL_ORDER_BGR,
      CAIRO_SUBPIXEL_ORDER_VRGB,
      CAIRO_SUBPIXEL_ORDER_VBGR;

   // Hint style constants
   const uint32
      CAIRO_HINT_STYLE_DEFAULT,
      CAIRO_HINT_STYLE_NONE,
      CAIRO_HINT_STYLE_SLIGHT,
      CAIRO_HINT_STYLE_MEDIUM,
      CAIRO_HINT_STYLE_FULL;

   // Hint metrics constants
   const uint32
      CAIRO_HINT_METRICS_DEFAULT,
      CAIRO_HINT_METRICS_OFF,
      CAIRO_HINT_METRICS_ON;

   // Font type constants
   const uint32
      CAIRO_FONT_TYPE_TOY,
      CAIRO_FONT_TYPE_FT,
      CAIRO_FONT_TYPE_WIN32,
      CAIRO_FONT_TYPE_QUARTZ,
      CAIRO_FONT_TYPE_USER;

   // Path constants
   const uint32
      CAIRO_PATH_MOVE_TO,
      CAIRO_PATH_LINE_TO,
      CAIRO_PATH_CURVE_TO,
      CAIRO_PATH_CLOSE_PATH;

   // Device constants
   const uint32
      CAIRO_DEVICE_TYPE_DRM,
      CAIRO_DEVICE_TYPE_GL,
      CAIRO_DEVICE_TYPE_SCRIPT,
      CAIRO_DEVICE_TYPE_XCB,
      CAIRO_DEVICE_TYPE_XLIB,
      CAIRO_DEVICE_TYPE_XML;

   // Surface constants
   const uint32
      CAIRO_SURFACE_TYPE_IMAGE,
      CAIRO_SURFACE_TYPE_PDF,
      CAIRO_SURFACE_TYPE_PS,
      CAIRO_SURFACE_TYPE_XLIB,
      CAIRO_SURFACE_TYPE_XCB,
      CAIRO_SURFACE_TYPE_GLITZ,
      CAIRO_SURFACE_TYPE_QUARTZ,
      CAIRO_SURFACE_TYPE_WIN32,
      CAIRO_SURFACE_TYPE_BEOS,
      CAIRO_SURFACE_TYPE_DIRECTFB,
      CAIRO_SURFACE_TYPE_SVG,
      CAIRO_SURFACE_TYPE_OS2,
      CAIRO_SURFACE_TYPE_WIN32_PRINTING,
      CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
      CAIRO_SURFACE_TYPE_SCRIPT,
      CAIRO_SURFACE_TYPE_QT,
      CAIRO_SURFACE_TYPE_RECORDING,
      CAIRO_SURFACE_TYPE_VG,
      CAIRO_SURFACE_TYPE_GL,
      CAIRO_SURFACE_TYPE_DRM,
      CAIRO_SURFACE_TYPE_TEE,
      CAIRO_SURFACE_TYPE_XML,
      CAIRO_SURFACE_TYPE_SKIA,
      CAIRO_SURFACE_TYPE_SUBSURFACE;

   // Pixel encoding constants
   const uint32
      CAIRO_FORMAT_INVALID,
      CAIRO_FORMAT_ARGB32,
      CAIRO_FORMAT_RGB24,
      CAIRO_FORMAT_A8,
      CAIRO_FORMAT_A1,
      CAIRO_FORMAT_RGB16_565;

   // Pixel encoding constants
   const uint32
      CAIRO_PATTERN_TYPE_SOLID,
      CAIRO_PATTERN_TYPE_SURFACE,
      CAIRO_PATTERN_TYPE_LINEAR,
      CAIRO_PATTERN_TYPE_RADIAL;

   // Color extention constants
   const uint32
      CAIRO_EXTEND_NONE,
      CAIRO_EXTEND_REPEAT,
      CAIRO_EXTEND_REFLECT,
      CAIRO_EXTEND_PAD;

   // Filter constants
   const uint32
      CAIRO_FILTER_FAST,
      CAIRO_FILTER_GOOD,
      CAIRO_FILTER_BEST,
      CAIRO_FILTER_NEAREST,
      CAIRO_FILTER_BILINEAR,
      CAIRO_FILTER_GAUSSIAN;

   // Overlap constants
   const uint32
      CAIRO_REGION_OVERLAP_IN,
      CAIRO_REGION_OVERLAP_OUT,
      CAIRO_REGION_OVERLAP_PART;

   // Opaque types
   class cairo_t;
   class cairo_surface_t;
   class cairo_device_t;
   class cairo_matrix_t;
   class cairo_pattern_t;
  
   // cairo_t
   cairo_t cairo_create (cairo_surface_t target);
   cairo_t cairo_reference (cairo_t cr);
   void cairo_destroy (cairo_t cr);
   uint cairo_get_reference_count (cairo_t cr);

   void cairo_save (cairo_t cr);
   void cairo_restore (cairo_t cr);
   void cairo_push_group (cairo_t cr);

   cairo_pattern_t cairo_pop_group (cairo_t cr);
   void  cairo_pop_group_to_source (cairo_t cr);

   // Modify state
   void cairo_set_operator (cairo_t cr, uint32 op);
   void cairo_set_source (cairo_t cr, cairo_pattern_t source);

   void cairo_set_source_rgb (cairo_t cr, float64 red, float64 green, float64 blue);
   void cairo_set_source_rgba (cairo_t cr,
                float64 red, float64 green, float64 blue,
                float64 alpha);

   void cairo_set_source_surface (cairo_t  cr,
              cairo_surface_t surface, 
              float64   x, float64   y);

   void cairo_set_tolerance (cairo_t cr, float64 tolerance);
   void cairo_set_antialias (cairo_t cr, uint32 antialias);

   void cairo_set_fill_rule (cairo_t cr, uint32 fill_rule);
   void cairo_set_line_width (cairo_t cr, float64 width);
   void cairo_set_line_cap (cairo_t cr, uint32 line_cap);

   void cairo_set_line_join (cairo_t cr, uint32 line_join);

   void cairo_set_dash (cairo_t cr, array[float64] dashes,
                         int num_dashes, float64 offset);

   void cairo_set_miter_limit (cairo_t cr, float64 limit);
   void cairo_translate (cairo_t cr, float64 tx, float64 ty);
   void cairo_scale (cairo_t cr, float64 sx, float64 sy);
   void cairo_rotate (cairo_t cr, float64 angle);
   void cairo_transform (cairo_t cr, cairo_matrix_t matrix);

   void cairo_set_matrix (cairo_t  cr, cairo_matrix_t matrix);
   void cairo_identity_matrix (cairo_t cr);
   void cairo_user_to_device (cairo_t cr, array[float64] x, array[float64] y);
   void cairo_user_to_device_distance (cairo_t cr, array[float64] dx, array[float64] dy);
   void cairo_device_to_user (cairo_t cr, array[float64] x, array[float64] y);
   void cairo_device_to_user_distance (cairo_t cr, array[float64] dx, array[float64] dy);

   // Path creation functions
   void cairo_new_path (cairo_t cr);
   void cairo_move_to (cairo_t cr, float64 x, float64 y);
   void cairo_new_sub_path (cairo_t cr);
   void cairo_line_to (cairo_t cr, float64 x, float64 y);
   void cairo_curve_to (cairo_t cr,
                           float64 x1, float64 y1,
                           float64 x2, float64 y2,
                           float64 x3, float64 y3);

   void cairo_arc (cairo_t cr,
                     float64 xc, float64 yc,
                     float64 radius,
                     float64 angle1, float64 angle2);

   void cairo_arc_negative (cairo_t cr,
                              float64 xc, float64 yc,
                              float64 radius,
                              float64 angle1, float64 angle2);


   void cairo_rel_move_to (cairo_t cr, float64 dx, float64 dy);
   void cairo_rel_line_to (cairo_t cr, float64 dx, float64 dy);
   void cairo_rel_curve_to (cairo_t cr,
                               float64 dx1, float64 dy1,
                               float64 dx2, float64 dy2,
                               float64 dx3, float64 dy3);

   void cairo_rectangle (cairo_t cr,
                            float64 x, float64 y,
                            float64 width, float64 height);

   void cairo_close_path (cairo_t cr);
   void cairo_path_extents (cairo_t cr,
                               array[float64] x1, array[float64] y1,
                               array[float64] x2, array[float64] y2);

   // Painting functions
   void cairo_paint (cairo_t cr);
   void cairo_paint_with_alpha (cairo_t cr, float64   alpha);

   void cairo_mask (cairo_t cr, cairo_pattern_t pattern);

   void cairo_mask_surface (cairo_t cr, cairo_surface_t surface,
                               float64 surface_x,
                               float64 surface_y);

   void cairo_stroke (cairo_t cr);
   void cairo_stroke_preserve (cairo_t cr);
   void cairo_fill (cairo_t cr);
   void cairo_fill_preserve (cairo_t cr);
   void cairo_copy_page (cairo_t cr);
   void cairo_show_page (cairo_t cr);

   // Insideness testing
   bool cairo_in_stroke (cairo_t cr, float64 x, float64 y);
   bool cairo_in_fill (cairo_t cr, float64 x, float64 y);
   bool cairo_in_clip (cairo_t cr, float64 x, float64 y);

   // Rectangular extents
   void cairo_stroke_extents (cairo_t cr,
                                 array[float64] x1, array[float64] y1,
                                 array[float64] x2, array[float64] y2);

   void cairo_fill_extents (cairo_t cr,
                               array[float64] x1, array[float64] y1,
                               array[float64] x2, array[float64] y2);

   // Clipping
   void cairo_reset_clip (cairo_t cr);
   void cairo_clip (cairo_t cr);
   void cairo_clip_preserve (cairo_t cr);
   void cairo_clip_extents (cairo_t cr,
                               array[float64] x1, array[float64] y1,
                               array[float64] x2, array[float64] y2);
}
