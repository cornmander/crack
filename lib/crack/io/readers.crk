# Classes for reading high-level stuff from Readers.
# Copyright 2010 Google Inc.

import crack.lang AppendBuffer, Buffer, ManagedBuffer, WriteBuffer;
import crack.io cout, FDReader, Reader;

@import crack.ann implements;

NEWLINE := '\n'[0];

class LineIter;
class LineReader;
LineIter _createLineIter(LineReader reader);

## Allows you to read one line at a time.
class LineReader {
    Reader r;
    ManagedBuffer buffer = {1024};
    uint start;
    
    oper init(Reader reader) : r = reader {}
    
    String readLine() {
        while (true) {
            for (uint i = start; i < buffer.size; ++i) {
                if (buffer.buffer[i] == NEWLINE) {
                    tmp := Buffer(buffer.buffer + start, i + 1 - start);
                    start = i + 1;
                    return String(tmp);
                }
            }
            
            # we didn't find a newline, grow the buffer and read another block
            
            # compact the buffer
            if (start) {
                buffer.compact(start);
                start = 0;
            }
            
            # if there's less than 1K of space available, grow the buffer
            if (buffer.size + 1024 > buffer.cap)
                buffer.grow(buffer.cap + 1024);
            
            # read the next block
            amtRead := 
                r.read(WriteBuffer(buffer.buffer + buffer.size, 0, 1024));
            buffer.size += amtRead;
            
            # if we are at the end of the file, either return the remaining 
            # chunk or a null pointer if there is no remaining chunk
            if (!amtRead)
                if (start == buffer.size) {
                    return null;
                } else {
                    result := String(buffer.buffer + start,
                                     buffer.size - start,
                                     false
                                     );
                    start = buffer.size;
                    return result;
                }
        }
        
        // should never get here
        return null;
    }
    
    LineIter iter() { return _createLineIter(this); }
}

class LineIter {
    LineReader reader;
    String line;
    
    oper init(LineReader reader) : reader = reader, line = reader.readLine() {}
    bool isTrue() { return !(line is null); }
    String elem() { return line; }
    void next() { line = reader.readLine(); }
}

LineIter _createLineIter(LineReader reader) {
    return LineIter(reader);
}

## A FullReader is a Reader that supports line reads, and complete reads of 
## its underlying reader.
class FullReader : LineReader @implements Reader {
    
    oper init(Reader reader) : LineReader(reader) {}

    ## Read the entire remaining contents of the underlying reader and return 
    ## it as a string.
    String readAll() {
        # start with the current contents of the buffer
        AppendBuffer result = {buffer.size - start};
        result.extend(buffer.buffer + start, buffer.size - start);
        
        # reset the buffer
        start = 0;
        buffer.size = 0;
        
        # use a temporary write buffer so we read in chunks
        buf := WriteBuffer(buffer.buffer, 1024);
        
        # read in the remainder of the file
        amtRead := r.read(buf);
        while (amtRead) {
            result.extend(buf.buffer, amtRead);
            amtRead = r.read(buf);
        }
        
        return String(result, true);
    }
}
