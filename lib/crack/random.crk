// Expose rand/srand random/srandom functions in libc
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

import crack.hash.murmur3 Murmur3_32;
import crack.time Time;
import crack.runtime random, srandom, setstate, initstate;
import crack.lang ManagedBuffer, AppendBuffer, Buffer, InvalidArgumentError;
import crack.cont.array Array;
@export_symbols random, srandom, setstate, initstate;

/// Return a byffer with the length specified that has a very high probablility
/// of being unique due to it's use of a high-resolution time values combined
/// with system random numbers.
Buffer uuid(uint numbytes) {
    buf := ManagedBuffer(16);
    buf.size = 16;
    result := AppendBuffer(numbytes);
    array[int32] ubuf = array[int32](buf.buffer);

    uint i = 0, j = 0, k = 0;
    t := Time.now();
    h := Murmur3_32();

    srandom(uint(t.nsecs));
    while (result.size < numbytes) {
        t.setToNow(null);
        Array[int32] tspec = [t.nsecs, t.secs]; // Start with time values
        for (k = 0; k < 2; k++)
            tspec.append(int32(random()));      // Add 2 random numbers

        k = i;
        for (j = 0; j < tspec.count(); j++)
            ubuf[k/4 + j] = tspec[j];

        h.update(buf);
        result.extend(h.digest(), numbytes - i >= 4 ? 4 : numbytes - i);
        i = result.size;
    }
    return result;
}
