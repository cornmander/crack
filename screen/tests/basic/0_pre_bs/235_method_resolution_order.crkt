%%TEST%%
%%ARGS%%
%%FILE%%
# This verifies that method resolution order is correct for xxxx finish
class A : VTableBase {
    int f(A other) { puts('in A'); return 0; }
}

class B : A {
    int f(B other) { puts('in B.f(B)'); return 0; }
    int f(A other) {
        puts('in B.f(A)');
        if (!((o := B.cast(other, null)) is null)) return f(o);
        return 0;
    }
}

A a = B();
B().f(a);

# This illustrates a bug discovered in nested scopes.  When A is nested within C,
# we were resolving "oper del" to IFace instead of Obj.
@abstract class IFace : VTableBase {
    @abstract void f();
}

class Obj : VTableBase {
    oper del() {
        puts('Obj deleted');
    }
}

class C : Obj {
    class A : Obj, IFace {
        void f() {}
        oper del() {
            puts('A deleted');
        }
    }
}

C.A o = C.A();
o.oper del();

# Verify that we don't override/implement functions in a base class.
class D : VTableBase {
    void f() {
        puts('in D.f');
    }
    class A : VTableBase {
        void f() {
            puts('in D.A.f');
        }

        void g() {
            f();
        }
    }
}

D.A().g();

# Verify that we _can_ override functions in a base class we're derived from.
class E : VTableBase {
  oper init() {}
  void f() { puts('in E.f'); }
  class A : E {
    void f() { puts('in E.A.f'); }
  }
}
E.A().f();

%%EXPECT%%
in B.f(A)
in B.f(B)
A deleted
Obj deleted
in D.A.f
in E.A.f
%%STDIN%%
