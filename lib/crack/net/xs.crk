// CrossRoads I/O
// (C) Conrad Steenberg <conrad.steenberg@gmail.com> Under LGPLv2
// 6/15/2012

// For more information on library use , see http://crossroads.io

import crack.ascii radix;
import crack.ext._xs xs_context, xs_msg_t, xs_pollitem_t, xs_socket_t,
    xs_errno, xs_strerror, xs_init, xs_term, xs_setctxopt, xs_msg_move,
    xs_msg_copy, xs_sock_new, xs_sock_close, xs_setsockopt, xs_setsockopt_int,
    xs_setsockopt_uint64, xs_setsockopt_byteptr, xs_sock_bind,
    xs_sock_connect, xs_sock_shutdown, xs_sock_send, xs_sock_recv,
    xs_getsockopt_int, xs_getsockopt_byteptr, xs_getsockopt_uint64,
    xs_sock_sendmsg, xs_sock_recvmsg, xs_poll, XS_VERSION_MAJOR,
    XS_VERSION_MINOR, XS_VERSION_PATCH, EFSM, ENOCOMPATPROTO, ETERM, EMTHREAD,
    XS_MAX_SOCKETS, XS_IO_THREADS, XS_PLUGIN, XS_PAIR, XS_PUB, XS_SUB,
    XS_REQ, XS_REP, XS_XREQ, XS_XREP, XS_PULL, XS_PUSH, XS_XPUB, XS_XSUB,
    XS_SURVEYOR, XS_RESPONDENT, XS_XSURVEYOR, XS_XRESPONDENT, XS_ROUTER,
    XS_DEALER, XS_AFFINITY, XS_IDENTITY, XS_SUBSCRIBE, XS_UNSUBSCRIBE,
    XS_RATE, XS_RECOVERY_IVL, XS_SNDBUF, XS_RCVBUF, XS_RCVMORE, XS_FD,
    XS_EVENTS, XS_TYPE, XS_LINGER, XS_RECONNECT_IVL, XS_BACKLOG,
    XS_RECONNECT_IVL_MAX, XS_MAXMSGSIZE, XS_SNDHWM, XS_RCVHWM,
    XS_MULTICAST_HOPS, XS_RCVTIMEO, XS_SNDTIMEO, XS_IPV4ONLY, XS_KEEPALIVE,
    XS_PROTOCOL, XS_SURVEY_TIMEOUT, XS_MORE, XS_DONTWAIT, XS_SNDMORE,
    XS_POLLIN, XS_POLLOUT, XS_POLLERR;

@export_symbols xs_context, xs_msg_t, xs_pollitem_t, xs_socket_t,
    xs_errno, xs_strerror, xs_init, xs_term, xs_setctxopt, xs_msg_move,
    xs_msg_copy, xs_sock_new, xs_sock_close, xs_setsockopt, xs_setsockopt_int,
    xs_setsockopt_uint64, xs_setsockopt_byteptr, xs_sock_bind,
    xs_sock_connect, xs_sock_shutdown, xs_sock_send, xs_sock_recv,
    xs_getsockopt_int, xs_getsockopt_byteptr, xs_getsockopt_uint64,
    xs_sock_sendmsg, xs_sock_recvmsg, xs_poll, XS_VERSION_MAJOR,
    XS_VERSION_MINOR, XS_VERSION_PATCH, EFSM, ENOCOMPATPROTO, ETERM, EMTHREAD,
    XS_MAX_SOCKETS, XS_IO_THREADS, XS_PLUGIN, XS_PAIR, XS_PUB, XS_SUB,
    XS_REQ, XS_REP, XS_XREQ, XS_XREP, XS_PULL, XS_PUSH, XS_XPUB, XS_XSUB,
    XS_SURVEYOR, XS_RESPONDENT, XS_XSURVEYOR, XS_XRESPONDENT, XS_ROUTER,
    XS_DEALER, XS_AFFINITY, XS_IDENTITY, XS_SUBSCRIBE, XS_UNSUBSCRIBE,
    XS_RATE, XS_RECOVERY_IVL, XS_SNDBUF, XS_RCVBUF, XS_RCVMORE, XS_FD,
    XS_EVENTS, XS_TYPE, XS_LINGER, XS_RECONNECT_IVL, XS_BACKLOG,
    XS_RECONNECT_IVL_MAX, XS_MAXMSGSIZE, XS_SNDHWM, XS_RCVHWM,
    XS_MULTICAST_HOPS, XS_RCVTIMEO, XS_SNDTIMEO, XS_IPV4ONLY, XS_KEEPALIVE,
    XS_PROTOCOL, XS_SURVEY_TIMEOUT, XS_MORE, XS_DONTWAIT, XS_SNDMORE,
    XS_POLLIN, XS_POLLOUT, XS_POLLERR;

import crack.io cout, cerr, FStr, Formatter;
import crack.lang CString, Exception, Buffer, ManagedBuffer;
import crack.runtime exit, memcpy, malloc, strlen;
@import crack.ann assert;

// Return error string for the given error number
CString getErrMsg(int errno){
    return CString(xs_strerror(errno), false);
}

// Return the error string for the current error condition
CString getErrMsg(){
    return CString(xs_strerror(xs_errno()), false);
}

// A wrapper for the opaque XS context
class Xs {
    xs_context ctx;
    oper init() : ctx = xs_init() {
        if (ctx is null)
            throw Exception(FStr() I`Could not initialize Xs: \
                                     $(getErrMsg())`);
    }
    
    oper del(){
        if (xs_term(ctx) == -1)
            throw Exception(FStr() I`Could not terminate Xs context: \
                                     $(getErrMsg())`);
    }
}

// A wrapper for XS messages
class XsMsg : Object, xs_msg_t {
    Buffer _buf; // We want to keep a reference to the buffer

    void handleError(String op) {
        int errno = xs_errno();
        if (errno != 0)
            throw Exception(FStr() `Could not $op XsMsg: $(getErrMsg())`);
    }

    // Returns the local Buffer object
    Buffer getBuffer() {
        return _buf;
    }

    // Update the buffer object reference from the data held by xs_msg_t
    Buffer updateBuffer() {
        _buf = Buffer(data(), size());
        return _buf;
    }

    // Create an empty message
    oper init(): _buf = null {
        retval := init_empty();
        if (retval == -1)
            handleError("init");
        updateBuffer();
    }

    // Create an empty message with a buffer attached
    oper init(uint size): _buf = null {
        retval := init_size(size);
        if (retval == -1)
            handleError("init_size");
        updateBuffer();
    }

    // Create a message with an initialized buffer
    oper init(Buffer data): _buf = data {
        retval := init_data(data.buffer, data.size, null, null);
        if (retval == -1)
            handleError("init_data");
    }

    void formatTo(Formatter fmt){
        fmt.write(_buf);
    }

    oper del(){
        close()
    }
}

// Wrap the opaque XS socket structure
class XsSocket {
    xs_socket_t sock;

    // Get error message and throw exception
    void handleError(String op) {
        int errno = xs_errno();
        if (errno != 0)
            throw Exception(FStr() `Could not $op XsSocket: $(getErrMsg())`);
    }

    // Constructor with low-level context type
    oper init(xs_context ctx, int tpe) : sock =  xs_sock_new(ctx, tpe) {
        if (sock is null)
            handleError("initialize");
    }

    // Constructor with higher-level context type
    oper init(Xs Ctx, int tpe) : sock = xs_sock_new(Ctx.ctx, tpe) {
        if (sock is null)
            handleError("initialize");
    }

    // Bind socket to endpoint (server)
    int bind(CString endpoint) {
        retval := xs_sock_bind(sock, endpoint.buffer);
        if (retval == -1)
            handleError("bind");
        return retval;
    }

    // Connect to endpoint (client)
    int connect(CString endpoint) {
        retval := xs_sock_connect(sock, endpoint.buffer);
        if (retval == -1)
            handleError("connect");
        return retval;
    }

    // Shut down the socket
    int shutdown(int how) {
        retval := xs_sock_shutdown(sock, how);
        if (retval == -1)
            handleError("shutdown");
        return retval;
    }

    // Send message
    int send(byteptr buf, uint len, int flags) {
        return xs_sock_send(sock, buf, len, flags);
    }

    // Send message using a Buffer object (like a string)
    int send(Buffer buf, int flags) {
        return xs_sock_send(sock, buf.buffer, buf.size, flags);
    }

    // Receive a message into a low-level byteptr buffer of max-size len
    int recv(byteptr buf, uint len, int flags) {
        return xs_sock_recv(sock, buf, len, flags);
    }

    // Receive a message into a Buffer object
    int recv(Buffer buf, int flags) {
        return xs_sock_recv(sock, buf.buffer, buf.size, flags);
    }

    // Send a message using a high-level XsMsg object (zero-copy)
    int sendMsg(XsMsg msg, int flags) {
        return xs_sock_sendmsg(sock, msg, flags);
    }

    // Receive a message into an XsMsg object (zero-copy)
    int recvMsg(XsMsg msg, int flags) {
        numbytes := xs_sock_recvmsg (sock, msg, flags);
        if (numbytes == -1) return -1;
        return numbytes;
    }

    // Set int option - this covers most use cases
    int setOpt(int option, int optval) {
        return xs_setsockopt_int(sock, option, optval);
    }

    // Set uint64 option
    int setOpt(int option, uint64 optval){
        return xs_setsockopt_uint64(sock, option, optval);
    }

    // Set string option using a low-level byteptr buffer
    int setOpt(int option, byteptr optval, uint optvallen) {
        return xs_setsockopt_byteptr(sock, option, optval, optvallen);
    }

    // Set string option using a Buffer obhect
    int setOpt(int option, Buffer buf) {
        return xs_setsockopt_byteptr(sock, option, buf.buffer, buf.size);
    }

    // Get int option: -1 means error, unless that is a valid option value
    int getOptInt(int option){
        return xs_getsockopt_int(sock, option);
    }

    // Get uint64 option value
    uint64 getOptUint64(int option){
        return xs_getsockopt_uint64(sock, option);
    }

    // Get zero-terminated string option value
    String getSockOptString(int option){
        byteptr b = xs_getsockopt_byteptr(sock, option);
        return String(b, strlen(b), true);
    }

    oper del() {
        if (!(sock is null) && xs_sock_close(sock) == -1)
            handleError("close");
        sock = null;
    }
}
