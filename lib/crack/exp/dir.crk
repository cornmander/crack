# Copyright 2010 Shannon Weyrick <weyrick@mozek.us>
# Classes for directory traversal

import crack.io cerr, StringFormatter, XWFormatter, XWriter;
import crack.lang die, FreeBase;
import crack.exp.bindings Opaque;
import crack.container List, Iterator;

import "libcrack-runtime.so" _crack_opendir, _crack_closedir, _crack_readdir, 
                             _crack_fnmatch, _crack_getDirEntry;

class _crackDir: Opaque { }

class _DirEntry: FreeBase {
    byteptr _name;
    int _type;
}

// must match Dir.h defines
int __CRACK_DTYPE_DIR   = 1;
int __CRACK_DTYPE_FILE  = 2;
int __CRACK_DTYPE_OTHER = 3;

_crackDir _crack_opendir(byteptr dirname);
_DirEntry _crack_getDirEntry(_crackDir d);
int _crack_closedir(_crackDir d);
int _crack_readdir(_crackDir d);
int _crack_fnmatch(byteptr pattern, byteptr string);

// XXX make portable
StaticString PATH_SEPARATOR = "/";

class FileInfo {

    String name;

    oper init(String name0): name(name0) { }
    oper init(byteptr name0): name(name0) { }

    bool matches(String pattern) {
        return (_crack_fnmatch(pattern.buffer, name.buffer) == 0);
    }

    void writeTo(XWriter out) {
        XWFormatter(out) `$name`;
    }

}

class Directory {

    String name;

    _crackDir _dir = null;
    bool _isValid = false; // implies isOpened
    bool _isOpened = false;

    List _dirList;
    List _fileList;

    oper init(String name0/*, bool open=true*/): name(name0) {
        // see issue #15
        /*
        if (open)
            _openDir();
        */
    }

    void _openDir() {

        _dir = _crack_opendir(name.buffer);
        _isValid = !(_dir is null);
        _isOpened = true;

        if (!_isValid)
            return;

        _DirEntry d = _crack_getDirEntry(_dir);
        // note, this should be done lazily so we don't have to load
        // an entire directory structure on open
        StaticString n = null;
        while (_crack_readdir(_dir)) {
            if (d._type == __CRACK_DTYPE_DIR) {
                n = StaticString(d._name);
                if (n != '.' && n != '..')
                    _dirList.append(Directory(name+PATH_SEPARATOR+n));
            }
            else {
                _fileList.append(FileInfo(d._name));
            }
        }

    }

    oper del() {
        if (_isValid)
            _crack_closedir(_dir);
    }


    bool isValid() {
        if (!_isOpened)
            _openDir();
        return _isValid;
    }

    bool isOpened() { return _isOpened; }

    Iterator dirIter() { 
        if (!_isOpened)
            _openDir();
        if (_isValid)
            return _dirList.iter(); 
        else
            return null;
    }

    Iterator fileInfoIter() {
        if (!_isOpened)
            _openDir();
        if (_isValid)
            return _fileList.iter(); 
        else
            return null;        
    }
    
    void writeTo(XWriter out) {
        XWFormatter(out) `$name`;
    }
    
}

