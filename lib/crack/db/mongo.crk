// Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Higher level classes from mongo client binding

import crack.lang Buffer, CString;
import crack.time Time;
import crack.ext._mongo
    BSON_BINARY_SUBTYPE_GENERIC, BSON_BINARY_SUBTYPE_FUNCTION,
    BSON_BINARY_SUBTYPE_BINARY, BSON_BINARY_SUBTYPE_UUID,
    BSON_BINARY_SUBTYPE_MD5, BSON_BINARY_SUBTYPE_USER_DEFINED, BSON_TYPE_NONE,
    BSON_TYPE_DOUBLE, BSON_TYPE_STRING, BSON_TYPE_DOCUMENT, BSON_TYPE_ARRAY,
    BSON_TYPE_BINARY, BSON_TYPE_OID, BSON_TYPE_BOOLEAN,
    BSON_TYPE_UTC_DATETIME, BSON_TYPE_NULL, BSON_TYPE_REGEXP,
    BSON_TYPE_JS_CODE, BSON_TYPE_SYMBOL, BSON_TYPE_JS_CODE_W_SCOPE,
    BSON_TYPE_INT32, BSON_TYPE_TIMESTAMP, BSON_TYPE_INT64,
    MONGO_COLLECTION_DEFAULTS, MONGO_COLLECTION_CAPPED,
    MONGO_COLLECTION_CAPPED_MAX, MONGO_COLLECTION_AUTO_INDEX_ID,
    MONGO_COLLECTION_SIZED, MONGO_INDEX_UNIQUE, MONGO_INDEX_DROP_DUPS,
    MONGO_INDEX_BACKGROUND, MONGO_INDEX_SPARSE,

    // Types
    bson, bson_cursor, mongo_connection, mongo_packet, mongo_sync_connection, 
    mongo_sync_cursor, mongo_sync_pool, mongo_sync_pool_connection,


    // Function names
    bson_type_as_string,
    bson_new,
    bson_new_sized,
    bson_new_from_data,
    bson_finish,
    bson_reset,
    bson_free,
    bson_size,
    bson_data,
    bson_validate_key,

    bson_append_string,
    bson_append_double,
    bson_append_document,
    bson_append_array,
    bson_append_binary,
    bson_append_oid,
    bson_append_boolean,
    bson_append_utc_datetime,
    bson_append_null,
    bson_append_regex,

    bson_append_javascript,
    bson_append_symbol,
    bson_append_javascript_w_scope,
    bson_append_int32,
    bson_append_timestamp,
    bson_append_int64,
    bson_cursor_new,
    bson_find,
    bson_cursor_free,
    bson_cursor_next,

    bson_cursor_find_next,
    bson_cursor_find,
    bson_cursor_type,
    bson_cursor_type_as_string,
    bson_cursor_key,
    bson_cursor_get_string,
    bson_cursor_get_double,
    bson_cursor_get_document,
    bson_cursor_get_array,
    bson_cursor_get_oid,

    bson_cursor_get_boolean,
    bson_cursor_get_utc_datetime,
    bson_cursor_get_javascript,
    bson_cursor_get_symbol,
    bson_cursor_get_int32,
    bson_cursor_get_timestamp,
    bson_cursor_get_int64,
    mongo_sync_connect,
    mongo_sync_conn_seed_add,
    mongo_sync_reconnect,

    mongo_sync_disconnect,
    mongo_sync_conn_get_slaveok,
    mongo_sync_conn_set_slaveok,
    mongo_sync_conn_get_safe_mode,
    mongo_sync_conn_set_safe_mode,
    mongo_sync_conn_get_auto_reconnect,
    mongo_sync_conn_set_auto_reconnect,
    mongo_sync_conn_get_max_insert_size,
    mongo_sync_conn_set_max_insert_size,
    mongo_sync_cmd_update,

    mongo_sync_cmd_insert_n,
    mongo_sync_cmd_query,
    mongo_sync_cmd_get_more,
    mongo_sync_cmd_delete,
    mongo_sync_cmd_custom,
    mongo_sync_cmd_count,
    mongo_sync_cmd_exists,
    mongo_sync_cmd_drop,
    mongo_sync_cmd_reset_error,
    mongo_sync_cmd_is_master,

    mongo_sync_cmd_ping,
    mongo_sync_cmd_user_add,
    mongo_sync_cmd_user_remove,
    mongo_sync_cmd_authenticate,
    mongo_sync_cmd_index_create,
    mongo_sync_cmd_index_drop,
    mongo_sync_cmd_index_drop_all,
    mongo_wire_packet_new,
    mongo_wire_packet_free,
    mongo_sync_cursor_new,

    mongo_sync_cursor_next,
    mongo_sync_cursor_get_data,
    mongo_sync_cursor_free,
    mongo_sync_pool_new,
    mongo_sync_pool_free,
    mongo_sync_pool_pick,
    mongo_sync_pool_return,
    mongo_util_oid_init,
    mongo_util_oid_new,
    mongo_util_oid_new_with_time,

    mongo_util_oid_as_string,
    mongo_connect,
    mongo_disconnect,
    mongo_connection_get_requestid,
    mongo_connection_set_timeout;

class BSON {
    bson __rep;

    // Create a new BSON object.
    oper init() : __rep = bson_new() {}

    // Copy constructor
    oper init(bson b) : __rep = b {
        
    }

    // Create a new BSON object, preallocating a given amount of space.
    oper init(int32 size) : __rep = bson_new_sized(size) {}

    // Create a BSON object from existing data.
    
    oper init(byteptr data, int32 size) : __rep = bson_new_from_data(data, size) {
    }
    
    // Finish a BSON object.
    bool finish() {
        return bson_finish(__rep);
    }

    // Reset a BSON object.
    bool reset() {
        return bson_reset(__rep);
    }

    // Free the memory associated with a BSON object.
    oper del() {
        bson_free(__rep)
    }

    // Return the size of a finished BSON object.
    int32 size() {
        return bson_size(__rep);
    }

    // Return the raw bytestream form of the BSON object.
    Buffer data() {
        return Buffer(bson_data(__rep), uint(bson_size(__rep)));
    }

    bson getRepl() {
        return __rep;
    }

    // Validate a BSON key.
    @static
    bool validateKey(CString key, bool forbid_dots, bool no_dollar) {
        return bson_validate_key(key.buffer, forbid_dots, no_dollar);
    }

    // Append API --------------------------------------------------------------

    // Append a string to a BSON object.
    @final bool appendString(CString name, Buffer val) {
        return bson_append_string(__rep, name.buffer, val.buffer,
                                  int32(val.size));
    }

    // Append a BSON document to a BSON object.
    @final bool appendDocument(CString name, BSON doc) {
        return bson_append_document(__rep, name.buffer, doc.getRepl());
    }

    // Append a BSON array to a BSON object.
    @final bool appendArray(CString name, BSON arr) {
        return bson_append_array(__rep, name.buffer, arr.getRepl());
    }

    // Append a BSON binary blob to a BSON object.
    @final bool appendBinary(CString name, int subtype, Buffer data) {
        return bson_append_binary(__rep, name.buffer, subtype, data.buffer,
                                  int32(data.size));
    }

    // Append an ObjectID to a BSON object.
    @final bool appendOID(CString name, Buffer oid) {
        if (oid.size != 12) return false;
        return bson_append_oid(__rep, name.buffer, oid.buffer);
    }

    // Append a boolean to a BSON object.
    bool appendBool(CString name, bool value) {
        return bson_append_boolean(__rep, name.buffer, value);
    }

    // Append an UTC datetime to a BSON object.
    bool appendUTCDateTime(CString name, int64 ts) {
        return bson_append_utc_datetime(__rep, name.buffer, ts);
    }

    // Append an UTC datetime to a BSON object.
    bool appendUTCDateTime(CString name, Time ts) {
        return bson_append_utc_datetime(__rep, name.buffer,
                int64(ts.secs)*1000+int64(ts.nsecs)/1000000);
    }

    // Append a NULL value to a BSON object.
    bool appendNull(CString name) {
        return bson_append_null(__rep, name.buffer);
    }

    // Append a regexp object to a BSON object.
    bool appendRegex(CString name, CString regexp, CString options) {
        return bson_append_regex(__rep, name.buffer, regexp.buffer,
                                 options.buffer);
    }

    // Append Javascript code to a BSON object.
    bool appendJavascript(CString name, Buffer js) {
        return bson_append_javascript(__rep, name.buffer, js.buffer,
                                      int32(js.size));
    }

    // Append a symbol to a BSON object.
    bool appendSymbol(CString name, Buffer symbol) {
        return bson_append_symbol(__rep, name.buffer, symbol.buffer,
                                  int32(symbol.size));
    }

    // Append Javascript code(with scope) to a BSON object.
    bool appendJavascriptScope(CString name, Buffer js, BSON scope) {
        return bson_append_javascript_w_scope(__rep, name.buffer, js.buffer,
                                              int32(js.size), scope.getRepl());
    }

    // Append a double to a BSON object.
    bool appendFloat64(CString name, float64 d) {
        return bson_append_double(__rep, name.buffer, d);
    }

    // Append a 32-bit integer to a BSON object.
    bool appendInt32(CString name, int32 i) {
        return bson_append_int32(__rep, name.buffer, i);
    }

    // Append a timestamp to a BSON object.
    bool appendTimeStamp(CString name, int64 ts) {
        return bson_append_timestamp(__rep, name.buffer, ts);
    }

    // Append a 64-bit integer to a BSON object.
    bool appendInt64(CString name, int64 i) {
        return bson_append_int64(__rep, name.buffer, i);
    }
}

