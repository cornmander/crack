// Test NumericArray
// (C) Conrad Steenberg <conrad.steenberg@gmail.com>

import crack.cont.array Array;
import crack.cont.numericarray NumericVector, NumericArray;
import crack.io cout;
import crack.exp.cmdline CmdOptions;
import crack.sys argv;
@import crack.exp.ann define;

sys_options :=  CmdOptions("--verbose=b/false");
sys_options.parse(argv);

void printCmp(NumericArray[int] A, NumericArray[int] B, String msg){
    if (A != B){
        cout `$msg\n`;
        cout `A = $A\n`;
        cout `B = $B\n`;
    }
}

A := Array[int]![1,2,3,4];
NumericArray[int] NA = {A};
printCmp(NA, NumericArray[int]![1,2,3,4], "Constructor using array failed");


NA2 := NA.promoted();
if (NA2.dims != 2)
    cout `Promoting 1D to 2D array failed\n`;

NA2 = NA.appended(5);
printCmp(NA2, NumericArray[int]![1, 2, 3, 4, 5], "Array append failed");

NA2[4] = 10;
NA2[1] = 8;
printCmp(NA2, NumericArray[int]![1, 8, 3, 4, 10], "Array assign failed");

// 2D Array creation
A3 := Array[Array[int]]![Array[int]![1,2], Array[int]![3,4]];
A4 := Array[Array[int]]![Array[int]![1,3], Array[int]![2,4]];

NumericArray[int] NA3 = {A3};
NumericArray[int] NA4 = {A4};

printCmp(NA3.T, NA4, "2D transpose failed");
printCmp(NA3, NA3.T.T, "2D double transpose failed");
printCmp(NA3, NA4.T, "2D inverse transpose failed");

@define identityTest(dim){
        I$$dim := NumericArray[int].I$$dim();
        _I$$dim := NumericArray[int].I(dim);
        printCmp(I$$dim, _I$$dim, "dim$$x$$dim identity matrix failed");
}

@identityTest(2)
@identityTest(3)
@identityTest(4)

cout `ok\n`;
