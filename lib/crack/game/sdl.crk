## Copyright 2012 Google Inc.
## 
##   This Source Code Form is subject to the terms of the Mozilla Public
##   License, v. 2.0. If a copy of the MPL was not distributed with this
##   file, You can obtain one at http://mozilla.org/MPL/2.0/.
## 
## SDL Wrapper library.

import crack.ext._sdl SDL_Event, SDL_EventNew, SDL_Event_GetType, 
    SDL_Event_GetKey,
    SDL_Event_GetMotion,
    SDL_FillRect,
    SDL_Flip,
    SDL_KeyboardEvent_GetKeysym,
    SDL_keysym_GetSym, 
    SDL_MouseMotionEvent_GetX,
    SDL_MouseMotionEvent_GetY,
    SDL_GL_SetAttribute, SDL_GL_SwapBuffers, SDL_Init, SDL_PollEvent, 
    SDL_Quit, SDL_SetVideoMode,
    SDL_Rect,
    SDL_ResizeEvent,
    SDL_Event_GetResize,
    SDL_ResizeEvent_GetH,
    SDL_ResizeEvent_GetW,
    SDL_Surface,
    SDL_GL_RED_SIZE, SDL_GL_GREEN_SIZE, SDL_GL_BLUE_SIZE, 
    SDL_INIT_EVERYTHING, SDL_FULLSCREEN, SDL_HWSURFACE, SDL_KEYDOWN, SDL_KEYUP, 
    SDL_MOUSEBUTTONDOWN, SDL_MOUSEBUTTONUP, SDL_MOUSEMOTION, SDL_OPENGL, 
    SDL_QUIT, SDL_RESIZABLE, SDL_VIDEORESIZE;
import crack.functor Functor0;
import crack.io cout, Formatter;
import crack.cont.array Array;
import crack.runtime free;
@import crack.ann define, interface, implements;

alias Surface = SDL_Surface;
@export_symbols Surface;

## 2D graphics coordinate
class Coord {
    int x, y;

    oper init(int x, int y) : x = x, y = y {}
    
    Coord oper +(Coord other) { return Coord(x + other.x, y + other.y); }
    
    Coord oper +=(Coord other) { x += other.x; y += other.y; return this; }
    
    void formatTo(Formatter out) {
        out `Coord($x, $y)`;
    }
}

## Indicates mouse motion.
class MouseMotionEvent {
    uint x, y;
    
    oper init(uint x, uint y) : x = x, y = y {}
}

## Interface for handlers to receive mouse motion events.
@interface MouseMotionHandler {
    @abstract bool onMouseMotion(MouseMotionEvent evt);
}

## Indicates a mouse button press or release.
class MouseButtonEvent {}

## Interface for handlers to receive mouse button press events.
@interface MouseButtonHandler {
    @abstract bool onMouseButtonDown(MouseButtonEvent evt);
    @abstract bool onMouseButtonUp(MouseButtonEvent evt);
}

## Indicates a keyboard event.
class KeyboardEvent {
    uint sym;
    
    oper init(uint sym) : sym = sym {}
}

## Interface for handlers to receive keyboard events.
@interface KeyboardHandler {
    @abstract bool onKeyDown(KeyboardEvent event);
    @abstract bool onKeyUp(KeyboardEvent event);
}

## Indicates that the screen was resized.
class ResizeEvent {
    int16 width, height;
    oper init(int16 width, int16 height) : width = width, height = height {}
}

## Interface for handlers to receive a resize event.
@interface ResizeHandler {
    @abstract bool onResize(ResizeEvent event);
}

class Holder[T] {
    T obj;
    oper init(T obj) : obj = obj {}
}

## A g3d application.  Takes care of initialization shutdown and provides the 
## application event loop.
class App {

    ## if true, try to run the program full-screen.  Set this before calling 
    ## initialize().
    bool fullscreen;

    ## if true, run in a resizable window and trigger an event when resized.  
    ## Set this before calling initialize().
    bool resizable;
    
    # The list of keyboard event handler.
    Array[Holder[KeyboardHandler]] keyboardHandlers = {};
    
    ## underlying SDL surface (XXX make protected?)
    Surface surface;

    ## Set this to the function used to render the graphics.    
    Functor0[void] graphics;
    
    # The list of mouse motion event handlers.
    Array[Holder[MouseMotionHandler]] __mouseMotionHandlers = {};
    
    # The list of mouse button event handlers.
    Array[Holder[MouseButtonHandler]] __mouseButtonHandlers = {};

    # The list of resize handlers
    Array[Holder[ResizeHandler]] __resizeHandlers = {};

    # true until someone calls terminate()
    bool __active = true;
    
    uint32 flags;
    
    int16 width = 640, height = 480;

    oper init(int width, int height) {}
    
    oper del() {
        SDL_Quit();
    }
    
    ## Initialize the application (do all SDL and OpenGL initializations)
    void initialize() {
        # sdl initialization
        SDL_Init(SDL_INIT_EVERYTHING);
        flags = (fullscreen ? SDL_FULLSCREEN : 0) |
                (resizable ? SDL_RESIZABLE : 0) | SDL_HWSURFACE;
        surface = SDL_SetVideoMode(width, height, 24, flags);        
    }

    ## Terminate the application.
    void terminate() {
        __active = false;
    }

    ## Add a new keyboard handler to the sequence.
    void addKeyboardHandler(KeyboardHandler handler) {
        keyboardHandlers.append(Holder[KeyboardHandler](handler));
    }

    ## Add a new resize handler to the sequence.
    void addResizeHandler(ResizeHandler handler) {
        __resizeHandlers.append(Holder[ResizeHandler](handler));
    }

    ## Run a single poll for events/process events cycle.
    bool runOneCycle() {
        
        evt := SDL_EventNew();

        # handle all pending events
        while (SDL_PollEvent(evt)) {
            evtType := SDL_Event_GetType(evt);
            if (evtType == SDL_KEYDOWN || evtType == SDL_KEYUP) {
                
                # get the key symbol
                key := SDL_Event_GetKey(evt);
                keysym := SDL_KeyboardEvent_GetKeysym(key);
                sym := SDL_keysym_GetSym(keysym);
                
                KeyboardEvent kevt = {sym};

                if (evtType == SDL_KEYDOWN) {
                    for (handler :in keyboardHandlers)
                        if (handler.obj.onKeyDown(kevt))
                            break;
                } else {
                    for (handler :in keyboardHandlers)
                        if (handler.obj.onKeyUp(kevt))
                            break;
                }
    
            } else if (evtType == SDL_VIDEORESIZE) {
                resize := SDL_Event_GetResize(evt);
                width = SDL_ResizeEvent_GetW(resize);
                height = SDL_ResizeEvent_GetH(resize);
                bool done;
                if (__resizeHandlers) {
                    ResizeEvent resizeEvent = {width, height};
                    for (h :in __resizeHandlers) {
                        if (done = h.obj.onResize(resizeEvent))
                            break;
                    }
                }
                
                # do the default handling if we didn't get a terminal resize 
                # handler.
                if (!done)
                    surface = SDL_SetVideoMode(width, height, 24, flags);
            } else if (evtType == SDL_MOUSEMOTION) {
                motion := SDL_Event_GetMotion(evt);
                x := SDL_MouseMotionEvent_GetX(motion);
                y := SDL_MouseMotionEvent_GetY(motion);
                
                MouseMotionEvent mevt = {x, y};
                for (handler :in __mouseMotionHandlers)
                    if (handler.obj.onMouseMotion(mevt))
                        break;
            } else if (evtType == SDL_MOUSEBUTTONDOWN) {
                for (handler :in __mouseButtonHandlers)
                    if (handler.obj.onMouseButtonDown(MouseButtonEvent()))
                        break;
            } else if (evtType == SDL_MOUSEBUTTONUP) {
                for (handler :in __mouseButtonHandlers)
                    if (handler.obj.onMouseButtonUp(MouseButtonEvent()))
                        break;
            }
        }
        
        free(evt);
        
        if (!(graphics is null))
            graphics();
        
        return false;
    }
    
    ## Flips the current draw surface into video.
    void flip() {
        SDL_Flip(surface);
    }

    ## Poll for events and process events and run graphics until terminate() 
    ## is called.    
    void mainloop() {
        while (__active)
            runOneCycle();
    }
    
    bool isActive() { return __active; }
}

# primitive graphic functions
void fillRect(Surface surface, Coord pos, Coord size, uint32 color) {
    r := SDL_Rect(int16(pos.x), int16(pos.y), uint16(size.x), 
                  uint16(size.y) 
                  );
    SDL_FillRect(surface, r, color >> 8);
    free(r);
}
