#!/bin/bash

rc=0

function test_output {
    text="$1"
    script="$2"
    expected="$3"
    
    echo -n "$text..."
    result="$(echo "$script" | ./crack - 2>&1)"
    if [ "$result" = "$expected" ]; then
        echo ok
    else
        echo FAILED
        rc=1
    fi
}
        

test_output "hello world" 'puts("hello world")' 'hello world'
test_output "semicolon terminated" 'puts("hello world");' 'hello world'
test_output "variable assignment" 'byteptr d = "abcd"; puts(d);' 'abcd'
test_output "simple if" 'if (1) puts("abcd");' 'abcd'
test_output "block if" 'if (1) { puts("abcd"); }' 'abcd'
test_output "simple if/else" 'if (1) puts("abcd"); else puts("efgh");' 'abcd'
test_output "simple negative if/else" \
    'if (0) puts("abcd"); else puts("efgh");' 'efgh'
test_output 'block if/else' \
    'if (1) { puts("abcd"); } else { puts("efgh"); }' 'abcd'
test_output 'negative block if/else' \
    'if (0) { puts("abcd"); } else { puts("efgh"); }' 'efgh'
test_output 'function with no args' \
    'void func() { puts("abcd"); } func()' "abcd"
test_output 'double terminal "if"' \
    'int32 function(int32 val) { if (val) return val; else return 0; } 
     printint(function(1)); printint(function(0));' \
     10
test_output 'simple addition' \
    'printint(1 + 2)' '3'
test_output 'pass 2 args, return 1' \
    'int32 f(int32 a, byteptr b) { return a; } printint(f(10, "xx"))' \
    '10'
test_output 'void func with explicit return' \
    'void f() { return; } f(); puts("abcd");' 'abcd'
test_output 'returning void from non-void func' \
    'int32 f() { return; }' \
    'ParseError: <stdin>:1: Missing return expression for function returning'\
' int32'
test_output 'invalid return types' \
    'void f() {} int32 g() { return f(); }' \
    'ParseError: <stdin>:1: Invalid return type void for function returning '\
'int32'
test_output 'return in module scope' \
    'return' \
    'ParseError: <stdin>:2: Return statement not allowed in module scope' \

test_output 'simple class definition' 'class Foo {};' ''
test_output 'class with base class' 'class Base {}; class Foo : Base {};' ''
# this was shabby to begin with, restore this and more tests when we get real 
# multiple inheritence working.
#test_output 'class with base classes' 'class Foo : int32, byteptr {};' ''
test_output 'bad class definition' 'class Foo xxx;' \
    'ParseError: <stdin>:1: token xxx was not expected at this time, '\
'expected colon or opening brace.'
test_output 'class with nested def' 'class Foo { int32 val; }' ''
test_output 'nested classes' 'class Foo { class Bar {}; }' ''
test_output 'bad type for member function' \
    'class Foo { xxx f() {} };' \
    'ParseError: <stdin>:1: xxx is not a type.'
test_output 'the "define" (":=") operator' \
    'x := 1234; printint(x)' \
    '1234'
test_output 'basic methods' \
    'class Foo { void p(byteptr data) { puts(data); } }; Foo f; f.p("abcd");' \
    'abcd'

test_output 'instance variables' \
    'class Foo {
        int32 val; void set() {val = 100;} int32 get() {return val;}
    };
    Foo x; x.set(); printint(x.get());
    x.val = 200; printint(x.val);' \
    '100200'

test_output 'implicit this' \
    'class Foo { int32 a; void g() { printint(a); }
                 void f() { a = 100; g(); } 
                 };
     Foo foo; foo.f();' \
     '100'

test_output 'explicit this' \
    'class Foo {
        int32 a;
        void g() { printint(this.a); }
        void f() { this.a = 100; this.g(); }
     };
     Foo foo; foo.f();' \
     '100'

test_output 'bad func names' \
    'class Foo { void f() { this.g(); }};' \
    'ParseError: <stdin>:1: No method exists matching g with these argument '\
'types.'

test_output 'using a classname with its definition' \
    'class C { void out() { puts("abcd"); } 
               C self() { return this; } }; C c; c.self().out();' \
    'abcd'

test_output 'external references of base inst vars' \
    'class A { int32 v; }; class B : A {}; B b; b.v = 100; printint(b.v);' \
    '100'

test_output 'internal references of base class inst vars' \
    'class A { int32 val; };
    class B : A { void init() { val = 100; } int32 f() { return val; } };
    B b; b.init(); printint(b.f());' \
    100

c='class A { int32 s; void i(int32 s0) {s=s0}
             void bind() {printint(s); puts("b");}
             void release() {printint(s); puts("r");} };'

test_output 'simple scope release' \
    "$c void func() { A a; a.i(2); printint(1)} func()" \
    '0b
12r'

test_output 'release on return void' \
    "$c void func() { A a; a.i(2); printint(1); return } func()" \
    '0b
12r'

test_output 'release on return expr' \
    "$c int32 func() { A a; a.i(2); printint(1); return 0} func()" \
    '0b
12r'

f="void func(int32 val) { A a; a.i(5); printint(1); 
                          if (val) { A b; b.i(4); printint(2); return; }
                          printint(3); }"
test_output 'premature return in nested context' \
    "$c $f func(1)" \
    '0b
10b
24r
5r'

test_output 'premature return bypassing nested context' \
    "$c $f func(0)" \
    '0b
135r'

test_output 'explicit default constructor' \
    'class A { int32 val; void init() { val = 100; } };
     A a; printint(a.val);' \
    100

test_output 'implicit default constructor' \
    'class A { int32 val; }; A a; printint(a.val);' \
    0

test_output 'integer comparison operators' \
    'if (0 == 0) printint(1); else printint(0);
     if (1 == 0) printint(0); else printint(1);
     if (0 != 0) printint(0); else printint(1);
     if (0 != 1) printint(1); else printint(0);
     if (1 > 0) printint(1); else printint(0);
     if (1 > 1) printint(0); else printint(1);
     if (0 < 1) printint(1); else printint(0);
     if (1 < 1) printint(0); else printint(1);
     if (1 >= 0) printint(1); else printint(0);
     if (1 >= 1) printint(1); else printint(0);
     if (1 >= 2) printint(0); else printint(1);
     if (0 <= 1) printint(1); else printint(0);' \
     111111111111

test_output 'implicit conversion from int to bool in condition' \
    'if (1) puts("yes"); if (0) puts("no");' \
    yes

# this was causing seg-faults at one point
test_output 'Override of variable in global scope' \
    'int32 a; class X { void b(int32 a) {} };' \
    '<stdin>:1: Symbol a hides another definition in an enclosing context.'

test_output 'method overloads' \
    'class A { void f(int32 v) { printint(v); }
               void f(byteptr v) { puts(v); } };
     A a; a.f(100); a.f("test");' \
    100test

# see to_test.crk: this only works when we define f(bool) before f(int32)
test_output 'function overloads' \
    'void f(bool b) {if (b) puts("true"); else puts("false")}
     void f(int32 v) {printint(v);}
     void f(byteptr v) {puts(v);}
     f(100); f("test"); f(1 == 0);' \
     '100test
false'

test_output 'conversion of null during initialization' \
    'int32 i = null; byteptr b = null; class A {}; A a = null; puts("ok");' \
    ok

test_output 'conversion of null during params and returns' \
    'class A {}; int32 func(int32 i, byteptr b, A a) { return null; }
     func(null, null, null); puts("ok");' \
    ok

test_output 'conversion of null during assignment' \
    'int32 i; byteptr b; class A {}; A a; i = null; b = null; a = null;
     puts("ok");' \
    ok

test_output 'tests against null' \
    'class A {}; 
    if (0 == null) printint(1);
    byteptr b = null;
    if (b is null) printint(2);
    A a = null;
    A c;
    if (a is null) printint(3);
    if (c is null) puts("fail"); else printint(4);' \
    1234
    
test_output 'precedence and parens' \
    'printint(4 / 2 * 2);
     printint(4 / (2 * 2));' \
     41

# this is a crappy test because it's very system dependent
test_output 'shared library imports' \
    'import "libc.so.6" strlen; int32 strlen(byteptr data);
     printint(strlen("four"));' \
     4

test_output 'temporary object construction' \
    'class A { int32 val; void init(int32 val0) { val = val0; } };
     printint(A(100).val)' \
    100

test_output 'execution of imports' \
    'import test.testmod func; puts("main")' \
    'testmod
main'

test_output 'full import functionality' \
    'import test.testmod func, A, aImportVar;
     func();
     aImportVar.dump();
     (A("local inst of imported class").dump());
     ' \
     'testmod
in test func
imported var
local inst of imported class'

test_output 'error messsage on default init with no default constructor' \
    'class Obj { void init(int32 v) {} }; Obj o;' \
    'ParseError: <stdin>:1: no default constructor'

test_output 'bool construction' \
    'bool b; if (b) puts("fail"); else puts("pass")' \
    pass

test_output 'type narrowing of receivers and args' \
    'class A { void foo(A more) { puts("did bar"); } };
     class B : A { void bar() { foo(this); } };
    (B().bar());' \
    'did bar'

test_output 'recursive functions' \
    'int32 sum(int32 top) { 
        if (top > 0) return top + sum(top - 1); else return 0;
     }
     printint(sum(10));' \
     55

test_output 'recursive methods' \
    'class A {
        int32 sum(int32 top) { 
            if (top > 0) return top + sum(top - 1); else return 0;
        }
     };
     printint(A().sum(10));' \
     55

test_output 'multiple types with the same underlying structure' \
    'class A {}; class B {}; B b; puts("ok");' \
    ok

test_output 'virtual methods' \
    'class A : VTableBase { void f() { puts("fail"); } };
     class B : A { void f() { puts("ok"); } };
     A a = B();
     a.f();' \
     ok

test_output 'incomplete virtual methods' \
    'class A : VTableBase { void f() { puts("fail"); }
                            void g() { f(); } };
     class B : A { void f() { puts("ok"); } };
     A a = B();
     a.g();' \
     ok

# voidptr conversion was returning a ResultExpr of the original type, which 
# caused problems.
test_output 'voidptr cast of class with release' \
    'void func(voidptr val) {printint(1);}
     class A { void release() { printint(2); } };
     func(A());' \
     12

test_output 'conversion from byteptr -> voidptr' \
    'voidptr v = "test string"; puts("ok")' \
    ok

# this test works because a call to the bind() operation gets generated from 
# within the generated "new" operator.
test_output 'instance narrowing works more than one level' \
    'class A { void bind() {} };
     class B : A {};
     class C : B {}; puts("ok");'  \
     ok

exit $rc
